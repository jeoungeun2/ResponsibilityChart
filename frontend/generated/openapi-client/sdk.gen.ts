// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerTestUserData, AppControllerTestUserResponses, AppControllerTestUserErrors, ResponsibilitiesControllerFindAllData, ResponsibilitiesControllerFindAllResponses, ResponsibilitiesControllerCreateData, ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ResponsibilitiesControllerRemoveData, ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ResponsibilitiesControllerFindOneData, ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ResponsibilitiesControllerUpdateData, ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ResponsibilitiesControllerGetCategoriesData, ResponsibilitiesControllerGetCategoriesResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * 사용자 테스트 API
 * JWT 토큰으로 인증된 사용자 정보 조회
 */
export const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerTestUserResponses, AppControllerTestUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user-test',
        ...options
    });
};

/**
 * 책무 목록 조회
 * 모든 책무 목록을 조회합니다.
 */
export const responsibilitiesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities',
        ...options
    });
};

/**
 * 책무 생성
 * 새로운 책무를 생성합니다.
 */
export const responsibilitiesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 책무 삭제
 * 책무를 삭제합니다.
 */
export const responsibilitiesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options
    });
};

/**
 * 책무 상세 조회
 * 특정 책무의 상세 정보를 조회합니다.
 */
export const responsibilitiesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options
    });
};

/**
 * 책무 수정
 * 기존 책무 정보를 수정합니다.
 */
export const responsibilitiesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 책무구분 목록 조회
 * 모든 책무구분 목록을 조회합니다.
 */
export const responsibilitiesControllerGetCategories = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerGetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerGetCategoriesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/categories/list',
        ...options
    });
};