// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerTestUserData, AppControllerTestUserResponses, AppControllerTestUserErrors, ResponsibilitiesControllerFindAllData, ResponsibilitiesControllerFindAllResponses, ResponsibilitiesControllerCreateData, ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ResponsibilitiesControllerRemoveData, ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ResponsibilitiesControllerFindOneData, ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ResponsibilitiesControllerUpdateData, ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ResponsibilitiesControllerGetCategoriesData, ResponsibilitiesControllerGetCategoriesResponses, ExecutivesControllerFindAllData, ExecutivesControllerFindAllResponses, ExecutivesControllerCreateData, ExecutivesControllerCreateResponses, ExecutivesControllerCreateErrors, ExecutivesControllerRemoveData, ExecutivesControllerRemoveResponses, ExecutivesControllerRemoveErrors, ExecutivesControllerFindOneData, ExecutivesControllerFindOneResponses, ExecutivesControllerFindOneErrors, ExecutivesControllerUpdateData, ExecutivesControllerUpdateResponses, ExecutivesControllerUpdateErrors, ExecutivesControllerFindByNameData, ExecutivesControllerFindByNameResponses, OrgRegistrationsControllerFindAllData, OrgRegistrationsControllerFindAllResponses, OrgRegistrationsControllerCreateData, OrgRegistrationsControllerCreateResponses, OrgRegistrationsControllerCreateErrors, OrgRegistrationsControllerRemoveData, OrgRegistrationsControllerRemoveResponses, OrgRegistrationsControllerRemoveErrors, OrgRegistrationsControllerFindOneData, OrgRegistrationsControllerFindOneResponses, OrgRegistrationsControllerFindOneErrors, OrgRegistrationsControllerUpdateData, OrgRegistrationsControllerUpdateResponses, OrgRegistrationsControllerUpdateErrors, OrgRegistrationsControllerRemoveByExecutiveIdData, OrgRegistrationsControllerRemoveByExecutiveIdResponses, OrgRegistrationsControllerRemoveByExecutiveIdErrors, OrgRegistrationsControllerFindByExecutiveIdData, OrgRegistrationsControllerFindByExecutiveIdResponses, OrgRegistrationsControllerFindByExecutiveIdErrors, QualiItemDtoTsControllerFindAllData, QualiItemDtoTsControllerFindAllResponses, QualiItemDtoTsControllerCreateData, QualiItemDtoTsControllerCreateResponses, QualiItemDtoTsControllerCreateErrors, QualiItemDtoTsControllerRemoveData, QualiItemDtoTsControllerRemoveResponses, QualiItemDtoTsControllerRemoveErrors, QualiItemDtoTsControllerFindOneData, QualiItemDtoTsControllerFindOneResponses, QualiItemDtoTsControllerFindOneErrors, QualiItemDtoTsControllerUpdateData, QualiItemDtoTsControllerUpdateResponses, QualiItemDtoTsControllerUpdateErrors, QualiItemDtoTsControllerRemoveByExecutiveIdData, QualiItemDtoTsControllerRemoveByExecutiveIdResponses, QualiItemDtoTsControllerRemoveByExecutiveIdErrors, QualiItemDtoTsControllerFindByExecutiveIdData, QualiItemDtoTsControllerFindByExecutiveIdResponses, QualiItemDtoTsControllerFindByExecutiveIdErrors, QualiItemDtoTsControllerFindByTypeData, QualiItemDtoTsControllerFindByTypeResponses, IntegrityItemControllerFindAllData, IntegrityItemControllerFindAllResponses, IntegrityItemControllerCreateData, IntegrityItemControllerCreateResponses, IntegrityItemControllerCreateErrors, IntegrityItemControllerRemoveData, IntegrityItemControllerRemoveResponses, IntegrityItemControllerRemoveErrors, IntegrityItemControllerFindOneData, IntegrityItemControllerFindOneResponses, IntegrityItemControllerFindOneErrors, IntegrityItemControllerUpdateData, IntegrityItemControllerUpdateResponses, IntegrityItemControllerUpdateErrors, IntegrityItemControllerRemoveByExecutiveIdData, IntegrityItemControllerRemoveByExecutiveIdResponses, IntegrityItemControllerRemoveByExecutiveIdErrors, IntegrityItemControllerFindByExecutiveIdData, IntegrityItemControllerFindByExecutiveIdResponses, IntegrityItemControllerFindByExecutiveIdErrors, IntegrityItemControllerFindByCategoryData, IntegrityItemControllerFindByCategoryResponses, EvaluationsControllerFindByExecutiveIdData, EvaluationsControllerFindByExecutiveIdResponses, EvaluationsControllerFindByExecutiveIdErrors, EvaluationsControllerCreateForExecutiveData, EvaluationsControllerCreateForExecutiveResponses, EvaluationsControllerCreateForExecutiveErrors, EvaluationsControllerRemoveData, EvaluationsControllerRemoveResponses, EvaluationsControllerRemoveErrors, EvaluationsControllerFindOneData, EvaluationsControllerFindOneResponses, EvaluationsControllerFindOneErrors, EvaluationsControllerUpdateData, EvaluationsControllerUpdateResponses, EvaluationsControllerUpdateErrors, EvaluationsControllerSaveDraftData, EvaluationsControllerSaveDraftResponses, EvaluationsControllerSaveDraftErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * 사용자 테스트 API
 * JWT 토큰으로 인증된 사용자 정보 조회
 */
export const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerTestUserResponses, AppControllerTestUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user-test',
        ...options
    });
};

/**
 * 책무 목록 조회
 * 모든 책무 목록을 조회합니다.
 */
export const responsibilitiesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities',
        ...options
    });
};

/**
 * 책무 생성
 * 새로운 책무를 생성합니다.
 */
export const responsibilitiesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 책무 삭제
 * 책무를 삭제합니다.
 */
export const responsibilitiesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options
    });
};

/**
 * 책무 상세 조회
 * 특정 책무의 상세 정보를 조회합니다.
 */
export const responsibilitiesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options
    });
};

/**
 * 책무 수정
 * 기존 책무 정보를 수정합니다.
 */
export const responsibilitiesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 책무구분 목록 조회
 * 모든 책무구분 목록을 조회합니다.
 */
export const responsibilitiesControllerGetCategories = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerGetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerGetCategoriesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/responsibilities/categories/list',
        ...options
    });
};

/**
 * 모든 임원 조회
 */
export const executivesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ExecutivesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExecutivesControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives',
        ...options
    });
};

/**
 * 임원 생성
 */
export const executivesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExecutivesControllerCreateResponses, ExecutivesControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 임원 삭제
 */
export const executivesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ExecutivesControllerRemoveResponses, ExecutivesControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives/{id}',
        ...options
    });
};

/**
 * 임원 단건 조회
 */
export const executivesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutivesControllerFindOneResponses, ExecutivesControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives/{id}',
        ...options
    });
};

/**
 * 임원 수정
 */
export const executivesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ExecutivesControllerUpdateResponses, ExecutivesControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 이름으로 임원 검색
 */
export const executivesControllerFindByName = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerFindByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExecutivesControllerFindByNameResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/executives/search/{name}',
        ...options
    });
};

/**
 * 모든 조직등록 조회
 */
export const orgRegistrationsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<OrgRegistrationsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrgRegistrationsControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations',
        ...options
    });
};

/**
 * 조직등록 생성
 */
export const orgRegistrationsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrgRegistrationsControllerCreateResponses, OrgRegistrationsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 조직등록 삭제
 */
export const orgRegistrationsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrgRegistrationsControllerRemoveResponses, OrgRegistrationsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations/{id}',
        ...options
    });
};

/**
 * 조직등록 단건 조회
 */
export const orgRegistrationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgRegistrationsControllerFindOneResponses, OrgRegistrationsControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations/{id}',
        ...options
    });
};

/**
 * 조직등록 수정
 */
export const orgRegistrationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrgRegistrationsControllerUpdateResponses, OrgRegistrationsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 특정 임원의 조직등록 삭제
 */
export const orgRegistrationsControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerRemoveByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrgRegistrationsControllerRemoveByExecutiveIdResponses, OrgRegistrationsControllerRemoveByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations/executive/{executiveId}',
        ...options
    });
};

/**
 * 특정 임원의 조직등록 조회
 */
export const orgRegistrationsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerFindByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgRegistrationsControllerFindByExecutiveIdResponses, OrgRegistrationsControllerFindByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/org-registrations/executive/{executiveId}',
        ...options
    });
};

/**
 * 모든 업무경험/전문성 항목 조회
 */
export const qualiItemDtoTsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<QualiItemDtoTsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items',
        ...options
    });
};

/**
 * 업무경험/전문성 항목 생성
 */
export const qualiItemDtoTsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QualiItemDtoTsControllerCreateResponses, QualiItemDtoTsControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 업무경험/전문성 항목 삭제
 */
export const qualiItemDtoTsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QualiItemDtoTsControllerRemoveResponses, QualiItemDtoTsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/{id}',
        ...options
    });
};

/**
 * 업무경험/전문성 항목 단건 조회
 */
export const qualiItemDtoTsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindOneResponses, QualiItemDtoTsControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/{id}',
        ...options
    });
};

/**
 * 업무경험/전문성 항목 수정
 */
export const qualiItemDtoTsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QualiItemDtoTsControllerUpdateResponses, QualiItemDtoTsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 특정 임원의 모든 업무경험/전문성 항목 삭제
 */
export const qualiItemDtoTsControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerRemoveByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QualiItemDtoTsControllerRemoveByExecutiveIdResponses, QualiItemDtoTsControllerRemoveByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/executive/{executiveId}',
        ...options
    });
};

/**
 * 특정 임원의 업무경험/전문성 항목 조회
 */
export const qualiItemDtoTsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindByExecutiveIdResponses, QualiItemDtoTsControllerFindByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/executive/{executiveId}',
        ...options
    });
};

/**
 * 유형별 업무경험/전문성 항목 조회
 */
export const qualiItemDtoTsControllerFindByType = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindByTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindByTypeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/quali-items/type/{type}',
        ...options
    });
};

/**
 * 모든 정직성 항목 조회
 */
export const integrityItemControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<IntegrityItemControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IntegrityItemControllerFindAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items',
        ...options
    });
};

/**
 * 정직성 항목 생성
 */
export const integrityItemControllerCreate = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IntegrityItemControllerCreateResponses, IntegrityItemControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 정직성 항목 삭제
 */
export const integrityItemControllerRemove = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IntegrityItemControllerRemoveResponses, IntegrityItemControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/{id}',
        ...options
    });
};

/**
 * 정직성 항목 단건 조회
 */
export const integrityItemControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindOneResponses, IntegrityItemControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/{id}',
        ...options
    });
};

/**
 * 정직성 항목 수정
 */
export const integrityItemControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IntegrityItemControllerUpdateResponses, IntegrityItemControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 특정 임원의 모든 정직성 항목 삭제
 */
export const integrityItemControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerRemoveByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IntegrityItemControllerRemoveByExecutiveIdResponses, IntegrityItemControllerRemoveByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/executive/{executiveId}',
        ...options
    });
};

/**
 * 특정 임원의 정직성 항목 조회
 */
export const integrityItemControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindByExecutiveIdResponses, IntegrityItemControllerFindByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/executive/{executiveId}',
        ...options
    });
};

/**
 * 카테고리별 정직성 항목 조회
 */
export const integrityItemControllerFindByCategory = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindByCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindByCategoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrity-items/category/{category}',
        ...options
    });
};

/**
 * 임원 평가 조회
 */
export const evaluationsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerFindByExecutiveIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationsControllerFindByExecutiveIdResponses, EvaluationsControllerFindByExecutiveIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/executive/{executiveId}',
        ...options
    });
};

/**
 * 임원 평가 생성
 */
export const evaluationsControllerCreateForExecutive = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerCreateForExecutiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluationsControllerCreateForExecutiveResponses, EvaluationsControllerCreateForExecutiveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/executive/{executiveId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 평가 삭제
 */
export const evaluationsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EvaluationsControllerRemoveResponses, EvaluationsControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/{id}',
        ...options
    });
};

/**
 * 평가 단건 조회
 */
export const evaluationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EvaluationsControllerFindOneResponses, EvaluationsControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/{id}',
        ...options
    });
};

/**
 * 평가 수정
 */
export const evaluationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EvaluationsControllerUpdateResponses, EvaluationsControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 평가 임시저장
 * IN_PROGRESS 상태로 저장
 */
export const evaluationsControllerSaveDraft = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerSaveDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EvaluationsControllerSaveDraftResponses, EvaluationsControllerSaveDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/evaluations/{id}/draft',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};