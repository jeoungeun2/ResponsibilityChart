{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@tanstack+react-query@5.85.5_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useMutation.js","turbopack:///[project]/node_modules/.pnpm/@tanstack+query-core@5.85.5/node_modules/@tanstack/query-core/build/modern/mutationObserver.js","turbopack:///[project]/app/master/executive/ui.tsx","turbopack:///[project]/config/openapi-runtime.ts","turbopack:///[project]/generated/openapi-client/client.gen.ts","turbopack:///[project]/generated/openapi-client/core/bodySerializer.gen.ts","turbopack:///[project]/generated/openapi-client/client/utils.gen.ts","turbopack:///[project]/generated/openapi-client/sdk.gen.ts","turbopack:///[project]/generated/openapi-client/core/auth.gen.ts","turbopack:///[project]/generated/openapi-client/client/client.gen.ts","turbopack:///[project]/generated/openapi-client/core/pathSerializer.gen.ts","turbopack:///[project]/generated/openapi-client/core/params.gen.ts","turbopack:///[project]/generated/openapi-client/core/serverSentEvents.gen.ts"],"sourcesContent":["\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport {\n  MutationObserver,\n  noop,\n  notifyManager,\n  shouldThrowError\n} from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map","// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  #client;\n  #currentResult = void 0;\n  #currentMutation;\n  #mutateOptions;\n  constructor(client, options) {\n    super();\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    } else if (this.#currentMutation?.state.status === \"pending\") {\n      this.#currentMutation.setOptions(this.options);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const context = this.#currentResult.context;\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context);\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, variables, context);\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            variables,\n            context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","\"use client\"\r\n\r\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport { DataTable } from '@/components/ui/data-table';\r\nimport { Pagination } from '@/components/ui/pagination';\r\nimport EditIcon from '@/components/ui/edit-icon';\r\nimport DeleteIcon from '@/components/ui/delete-icon';\r\nimport ExecutiveDetailModal from '@/components/ExecutiveDetailModal';\r\n\r\n\r\nimport { useRouter } from 'next/navigation';\r\nimport { \r\n  executivesControllerSearch, \r\n  executivesControllerCreate, \r\n  executivesControllerUpdate, \r\n  executivesControllerRemove,\r\n  executivesControllerFindAll\r\n} from '@/generated/openapi-client/sdk.gen';\r\nimport { client } from '@/generated/openapi-client/client.gen';\r\n\r\nexport default function Ui() {\r\n  const { data: session, status } = useSession();\r\n  const enabled = status === \"authenticated\" && !!session?.accessToken;\r\n  const queryClient = useQueryClient();\r\n  const router = useRouter();\r\n  \r\n\r\n  \r\n  // 상태 관리\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editingExecutive, setEditingExecutive] = useState<any>(null);\r\n  const [newExecutive, setNewExecutive] = useState({ \r\n    name: '', \r\n    employeeNo: '',\r\n    positionLabel: '', \r\n    titleLabel: '',\r\n    phone: '',\r\n    email: '',\r\n    termStartDate: new Date().toISOString().split('T')[0], // 오늘 날짜를 기본값으로\r\n    termEndDate: ''\r\n  });\r\n  const [showDetailModal, setShowDetailModal] = useState(false);\r\n  const [selectedExecutive, setSelectedExecutive] = useState<any>(null);\r\n\r\n  // 검색 필터 상태\r\n  const [searchFilters, setSearchFilters] = useState<Record<string, string>>({\r\n    name: '',\r\n    evaluationStatus: ''\r\n  });\r\n\r\n  // 이름 리스트 상태 (전체 이름 목록)\r\n  const [nameList, setNameList] = useState<Array<{ value: string; label: string }>>([]);\r\n\r\n  // 필터 설정 정의\r\n  const filters = [\r\n    {\r\n      key: 'name',\r\n      label: '이름',\r\n      type: 'dropdown' as const,\r\n      placeholder: '모든 이름',\r\n      width: 'w-40'\r\n    },\r\n    {\r\n      key: 'evaluationStatus',\r\n      label: '평가상태',\r\n      type: 'dropdown' as const,\r\n      placeholder: '모든 상태',\r\n      width: 'w-32'\r\n    }\r\n  ];\r\n\r\n  // 필터 옵션들 정의 (새로운 구조)\r\n  const filterOptions = {\r\n    name: nameList,\r\n    evaluationStatus: [\r\n      { value: 'NOT_STARTED', label: '미시작' },\r\n      { value: 'STARTED', label: '시작' },\r\n      { value: 'IN_PROGRESS', label: '진행중' }\r\n    ]\r\n  };\r\n\r\n\r\n\r\n  // 폼 필드 정의\r\n  const formFields = [\r\n    { key: 'name', label: '이름', type: 'text' as const, placeholder: '이름을 입력하세요', required: true },\r\n    { key: 'employeeNo', label: '사번', type: 'text' as const, placeholder: '사번을 입력하세요' },\r\n    { key: 'positionLabel', label: '직위', type: 'text' as const, placeholder: '직위를 입력하세요' },\r\n    { key: 'titleLabel', label: '직책', type: 'text' as const, placeholder: '직책을 입력하세요' },\r\n    { key: 'phone', label: '연락처', type: 'tel' as const, placeholder: '연락처를 입력하세요' },\r\n    { key: 'email', label: '이메일', type: 'email' as const, placeholder: '이메일을 입력하세요' },\r\n    { key: 'termStartDate', label: '재임시작일', type: 'date' as const },\r\n    { key: 'termEndDate', label: '재임종료일', type: 'date' as const }\r\n  ];\r\n\r\n  // 페이지네이션 상태\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    take: 15,\r\n    total: 0,\r\n    pageCount: 0\r\n  });\r\n\r\n  // 검색 파라미터 구성\r\n  const searchParams: any = {\r\n    page: pagination.page,\r\n    take: pagination.take,\r\n    name: searchFilters.name || undefined,\r\n    evaluationStatus: searchFilters.evaluationStatus || undefined\r\n  };\r\n\r\n  // 컬럼 정의 (확장)\r\n  const columns = [\r\n    {\r\n      key: \"name\" as keyof any,\r\n      header: \"이름\",\r\n      visible: true,\r\n      render: (value: any, row: any) => (\r\n        <button \r\n          onClick={() => handleViewDetail(row)}\r\n          className=\"text-blue-600 hover:text-blue-800 text-base transition-colors underline cursor-pointer\"\r\n          title=\"상세보기\"\r\n        >\r\n          {value}\r\n        </button>\r\n      )\r\n    },\r\n    {\r\n      key: \"employeeNo\" as keyof any,\r\n      header: \"사번\",\r\n      visible: true\r\n    },\r\n    {\r\n      key: \"positionLabel\" as keyof any,\r\n      header: \"직위\",\r\n      visible: true\r\n    },\r\n    {\r\n      key: \"titleLabel\" as keyof any,\r\n      header: \"직책\",\r\n      visible: true\r\n    },\r\n    {\r\n      key: \"phone\" as keyof any,\r\n      header: \"연락처\",\r\n      visible: true\r\n    },\r\n    {\r\n      key: \"email\" as keyof any,\r\n      header: \"이메일\",\r\n      visible: true\r\n    },\r\n    {\r\n      key: \"termStartDate\" as keyof any,\r\n      header: \"재임시작일\",\r\n      visible: false\r\n    },\r\n    {\r\n      key: \"termEndDate\" as keyof any,\r\n      header: \"재임종료일\",\r\n      visible: false\r\n    },\r\n    {\r\n      key: \"orgReg.managingOrg\" as keyof any,\r\n      header: \"관리조직\",\r\n      visible: false\r\n    },\r\n    {\r\n      key: \"orgReg.division\" as keyof any,\r\n      header: \"소관부서\",\r\n      visible: false\r\n    },\r\n    {\r\n      key: \"evaluationStatus\" as keyof any,\r\n      header: \"평가상태\",\r\n      visible: true,\r\n      render: (value: any, row: any) => {\r\n        const status = value || 'NOT_STARTED';\r\n        const statusLabels: Record<string, string> = {\r\n          'NOT_STARTED': '미시작',\r\n          'STARTED': '시작',\r\n          'IN_PROGRESS': '진행중'\r\n        };\r\n        const statusColors: Record<string, string> = {\r\n          'NOT_STARTED': 'bg-gray-100 text-gray-800',\r\n          'STARTED': 'bg-blue-100 text-blue-800',\r\n          'IN_PROGRESS': 'bg-yellow-100 text-yellow-800'\r\n        };\r\n        return (\r\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusColors[status] || 'bg-gray-100 text-gray-800'}`}>\r\n            {statusLabels[status] || status}\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  // 상세보기 핸들러\r\n  const handleViewDetail = (executive: any) => {\r\n    setSelectedExecutive(executive);\r\n    setShowDetailModal(true);\r\n  };\r\n\r\n  // 상세보기 열 추가\r\n  const columnsWithDetail = [\r\n    ...columns,\r\n    {\r\n      key: \"detail\",\r\n      header: \"상세보기\",\r\n      visible: true,\r\n      render: (value: any, row: any) => (\r\n        <button \r\n          onClick={() => handleViewDetail(row)}\r\n          className=\"text-gray-700 hover:text-gray-800 text-base transition-colors px-2 py-1 rounded hover:bg-gray-50 underline\"\r\n          style={{ cursor: 'pointer' }}\r\n          title=\"상세보기\"\r\n        >\r\n          Link\r\n        </button>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const [tableColumns, setTableColumns] = useState(columnsWithDetail);\r\n\r\n  // 컬럼 변경 핸들러\r\n  const handleColumnsChange = (newColumns: any[]) => {\r\n    setTableColumns(newColumns);\r\n  };\r\n\r\n  // React Query로 데이터 가져오기 (검색 및 페이지네이션 지원)\r\n  const { data: searchResult, isLoading, error, isError, isSuccess } = useQuery({\r\n    queryKey: ['executives', 'search', searchParams],\r\n    queryFn: async () => {\r\n      try {\r\n        // OpenAPI SDK 사용\r\n        const response = await executivesControllerSearch({\r\n          client,\r\n          query: searchParams\r\n        });\r\n        \r\n        return response;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    enabled,                               // 인증 준비될 때만\r\n    staleTime: 60_000,             // 1분 내 재렌더시 재요청 방지\r\n    refetchOnWindowFocus: false,   // 포커스마다 재요청 방지\r\n    retry: 1,       \r\n  });\r\n\r\n  // 전체 이름 목록을 가져오는 쿼리 (드롭다운용)\r\n  const { data: allNamesResult, isLoading: isLoadingNames, error: namesError } = useQuery({\r\n    queryKey: ['executives', 'all-names'],\r\n    queryFn: async () => {\r\n      try {\r\n\r\n        \r\n        // findAll을 사용해서 모든 임원 데이터 가져오기\r\n        const response = await executivesControllerFindAll({\r\n          client\r\n        });\r\n        \r\n\r\n        return response;\r\n      } catch (error) {\r\n\r\n        return null;\r\n      }\r\n    },\r\n    enabled,                               // 인증 준비될 때만\r\n    staleTime: 300_000,            // 5분 내 재렌더시 재요청 방지 (이름 목록은 자주 변경되지 않음)\r\n    refetchOnWindowFocus: false,   // 포커스마다 재요청 방지\r\n    retry: 1,\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // 데이터 추출 로직\r\n  const executives = useMemo(() => {\r\n    // OpenAPI SDK 응답 구조 분석\r\n    if (searchResult && typeof searchResult === 'object') {\r\n      // searchResult.data가 있는 경우 (일반적인 응답)\r\n      if ((searchResult as any).data && Array.isArray((searchResult as any).data)) {\r\n        return (searchResult as any).data;\r\n      }\r\n      \r\n      // searchResult 자체가 배열인 경우\r\n      if (Array.isArray(searchResult)) {\r\n        return searchResult;\r\n      }\r\n      \r\n      // searchResult.response가 있는 경우 (OpenAPI SDK 응답)\r\n      if ((searchResult as any).response) {\r\n        // response에서 데이터 추출 시도\r\n        if ((searchResult as any).data && Array.isArray((searchResult as any).data)) {\r\n          return (searchResult as any).data;\r\n        }\r\n        \r\n        // response 자체가 데이터인 경우\r\n        if (typeof (searchResult as any).response === 'object' && (searchResult as any).response.data) {\r\n          if (Array.isArray((searchResult as any).response.data)) {\r\n            return (searchResult as any).response.data;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // searchResult.data가 객체인 경우 (배열이 아닌 경우)\r\n      if ((searchResult as any).data && typeof (searchResult as any).data === 'object' && !Array.isArray((searchResult as any).data)) {\r\n        const data = (searchResult as any).data;\r\n        \r\n        // data 내부에서 배열 찾기\r\n        for (const [key, value] of Object.entries(data)) {\r\n          if (Array.isArray(value)) {\r\n            return value;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return [];\r\n  }, [searchResult]);\r\n\r\n\r\n\r\n  const meta = useMemo(() => {\r\n    if (searchResult && typeof searchResult === 'object' && (searchResult as any).data?.meta) {\r\n      return (searchResult as any).data.meta;\r\n    }\r\n    \r\n    return null;\r\n  }, [searchResult]);\r\n\r\n\r\n\r\n\r\n\r\n  // 페이지네이션 상태 업데이트\r\n  useEffect(() => {\r\n    if (searchResult && typeof searchResult === 'object' && (searchResult as any).data?.meta) {\r\n      const meta = (searchResult as any).data.meta;\r\n      setPagination(prev => ({\r\n        ...prev,\r\n        total: meta.total || 0,\r\n        pageCount: meta.totalPages || 0\r\n      }));\r\n    }\r\n  }, [searchResult]);\r\n\r\n  // 전체 이름 목록에서 이름 리스트 생성\r\n  useEffect(() => {\r\n\r\n    \r\n    if (allNamesResult && typeof allNamesResult === 'object') {\r\n      let allNamesData: any[] = [];\r\n      \r\n      // allNamesResult에서 데이터 추출 (searchResult와 동일한 로직)\r\n      if ((allNamesResult as any).data && Array.isArray((allNamesResult as any).data)) {\r\n        allNamesData = (allNamesResult as any).data;\r\n\r\n      } else if (Array.isArray(allNamesResult)) {\r\n        allNamesData = allNamesResult;\r\n\r\n      } else if ((allNamesResult as any).response) {\r\n        if ((allNamesResult as any).data && Array.isArray((allNamesResult as any).data)) {\r\n          allNamesData = (allNamesResult as any).data;\r\n  \r\n        } else if (typeof (allNamesResult as any).response === 'object' && (allNamesResult as any).response.data) {\r\n          if (Array.isArray((allNamesResult as any).response.data)) {\r\n            allNamesData = (allNamesResult as any).response.data;\r\n    \r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n      // 이름 리스트 생성 (중복 제거)\r\n      if (allNamesData.length > 0) {\r\n        const uniqueNames = Array.from(\r\n          new Set(\r\n            allNamesData\r\n              .map((exec: any) => exec.name)\r\n              .filter((name: string) => name && name.trim())\r\n          )\r\n        ).map(name => ({\r\n          value: name,\r\n          label: name\r\n        }));\r\n        \r\n\r\n        setNameList(uniqueNames);\r\n      } else {\r\n\r\n      }\r\n    } else {\r\n      console.log('allNamesResult가 없거나 객체가 아님');\r\n    }\r\n  }, [allNamesResult]);\r\n\r\n\r\n\r\n  // 폼 데이터 변경 핸들러\r\n  const handleFormDataChange = (field: string, value: string) => {\r\n    setNewExecutive(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  // 검색 필터 변경 핸들러\r\n  const handleFilterChange = (key: string, value: string) => {\r\n    setSearchFilters(prev => ({ ...prev, [key]: value }));\r\n    setPagination(prev => ({ ...prev, page: 1 })); // 필터 변경시 첫 페이지로\r\n  };\r\n\r\n\r\n\r\n  // 페이지 변경 핸들러\r\n  const handlePageChange = (newPage: number) => {\r\n    setPagination(prev => ({ ...prev, page: newPage }));\r\n  };\r\n\r\n  // 추가 mutation - 실제 API 호출 구현\r\n  const createMutation = useMutation({\r\n    mutationFn: async (data: { \r\n      name: string; \r\n      employeeNo?: string;\r\n      positionLabel?: string; \r\n      titleLabel?: string;\r\n      phone?: string;\r\n      email?: string;\r\n      termStartDate?: string;\r\n      termEndDate?: string;\r\n    }) => {\r\n      try {\r\n        // 필수 필드 검증\r\n        if (!data.name || !data.name.trim()) {\r\n          throw new Error('이름은 필수 입력 항목입니다.');\r\n        }\r\n\r\n        // API 호출을 위한 데이터 준비\r\n        const createData = {\r\n          name: data.name.trim(),\r\n          employeeNo: data.employeeNo?.trim() || '',\r\n          positionLabel: data.positionLabel?.trim() || '',\r\n          titleLabel: data.titleLabel?.trim() || '',\r\n          phone: data.phone?.trim() || '',\r\n          email: data.email?.trim() || '',\r\n          termStartDate: data.termStartDate || new Date().toISOString().split('T')[0],\r\n          termEndDate: data.termEndDate?.trim() || undefined\r\n        } as any; // 타입 에러 해결을 위한 타입 단언\r\n\r\n        const response = await executivesControllerCreate({\r\n          client,\r\n          body: createData\r\n        });\r\n        \r\n        // HTTP 응답 상태 확인\r\n        if (response && typeof response === 'object' && 'response' in response) {\r\n          const httpResponse = (response as any).response;\r\n          \r\n          if (httpResponse && httpResponse.status >= 400) {\r\n            throw new Error(`HTTP ${httpResponse.status}: ${httpResponse.statusText || 'Bad Request'}`);\r\n          }\r\n        }\r\n\r\n        return response;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: ['executives'] });\r\n      setShowAddForm(false);\r\n      setNewExecutive({ \r\n        name: '', \r\n        employeeNo: '',\r\n        positionLabel: '', \r\n        titleLabel: '',\r\n        phone: '',\r\n        email: '',\r\n        termStartDate: new Date().toISOString().split('T')[0],\r\n        termEndDate: ''\r\n      });\r\n      \r\n      // 성공 메시지 표시\r\n      alert('임원이 성공적으로 추가되었습니다.');\r\n    },\r\n    onError: (error: any) => {\r\n      const errorMessage = error?.response?.data?.message || error?.message || '임원 추가 중 오류가 발생했습니다.';\r\n      alert(`오류: ${errorMessage}`);\r\n    }\r\n  });\r\n\r\n  // 수정 mutation - 실제 API 호출 구현\r\n  const updateMutation = useMutation({\r\n    mutationFn: async (data: { \r\n      id: string; \r\n      name: string; \r\n      employeeNo?: string;\r\n      positionLabel?: string; \r\n      titleLabel?: string;\r\n      phone?: string;\r\n      email?: string;\r\n      termStartDate?: string;\r\n      termEndDate?: string;\r\n    }) => {\r\n      try {\r\n        // 필수 필드 검증\r\n        if (!data.name) {\r\n          throw new Error('이름은 필수 입력 항목입니다.');\r\n        }\r\n\r\n        // API 호출을 위한 데이터 준비\r\n        const updateData = {\r\n          name: data.name,\r\n          employeeNo: data.employeeNo || undefined,\r\n          positionLabel: data.positionLabel || undefined,\r\n          titleLabel: data.titleLabel || undefined,\r\n          phone: data.phone || undefined,\r\n          email: data.email || undefined,\r\n          termStartDate: data.termStartDate || undefined,\r\n          termEndDate: data.termEndDate || undefined\r\n        };\r\n\r\n        const response = await executivesControllerUpdate({\r\n          client,\r\n          path: { id: data.id },\r\n          body: updateData\r\n        });\r\n\r\n        return response;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['executives'] });\r\n      setShowEditForm(false);\r\n      setEditingExecutive(null);\r\n      \r\n      // 성공 메시지 표시\r\n      alert('임원 정보가 성공적으로 수정되었습니다.');\r\n    },\r\n    onError: (error: any) => {\r\n      const errorMessage = error?.response?.data?.message || error?.message || '임원 수정 중 오류가 발생했습니다.';\r\n      alert(`오류: ${errorMessage}`);\r\n    }\r\n  });\r\n\r\n  // 삭제 mutation - 실제 API 호출 구현\r\n  const deleteMutation = useMutation({\r\n    mutationFn: async (id: string) => {\r\n      try {\r\n        const response = await executivesControllerRemove({\r\n          client,\r\n          path: { id }\r\n        });\r\n\r\n        return response;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['executives'] });\r\n      \r\n      // 성공 메시지 표시\r\n      alert('임원이 성공적으로 삭제되었습니다.');\r\n    },\r\n    onError: (error: any) => {\r\n      const errorMessage = error?.response?.data?.message || error?.message || '임원 삭제 중 오류가 발생했습니다.';\r\n      alert(`오류: ${errorMessage}`);\r\n    }\r\n  });\r\n\r\n  // 선택 삭제 핸들러\r\n  const handleBulkDelete = async (selectedIds: string[]) => {\r\n    if (selectedIds.length === 0) {\r\n      alert('삭제할 항목을 선택해주세요.');\r\n      return;\r\n    }\r\n\r\n    const confirmMessage = `선택된 ${selectedIds.length}명의 임원을 삭제하시겠습니까?`;\r\n    if (!confirm(confirmMessage)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 선택된 모든 ID에 대해 삭제 API 호출\r\n      const deletePromises = selectedIds.map(id => \r\n        executivesControllerRemove({\r\n          client,\r\n          path: { id }\r\n        })\r\n      );\r\n\r\n      await Promise.all(deletePromises);\r\n      \r\n      // 성공 시 쿼리 무효화 및 메시지 표시\r\n      queryClient.invalidateQueries({ queryKey: ['executives'] });\r\n      alert(`${selectedIds.length}명의 임원이 성공적으로 삭제되었습니다.`);\r\n      \r\n    } catch (error: any) {\r\n      const errorMessage = error?.response?.data?.message || error?.message || '선택 삭제 중 오류가 발생했습니다.';\r\n      alert(`오류: ${errorMessage}`);\r\n    }\r\n  };\r\n\r\n  // 선택 상태 초기화 핸들러\r\n  const handleSelectionReset = () => {\r\n    // 선택 상태 초기화 로직이 필요하면 여기에 추가\r\n    console.log('선택 상태가 초기화되었습니다.');\r\n  };\r\n\r\n  // 추가 폼 열기/닫기 핸들러\r\n  const handleShowAddForm = () => {\r\n    if (showAddForm) {\r\n      // 폼 닫기\r\n      setShowAddForm(false);\r\n      setNewExecutive({ \r\n        name: '', \r\n        employeeNo: '',\r\n        positionLabel: '', \r\n        titleLabel: '',\r\n        phone: '',\r\n        email: '',\r\n        termStartDate: '',\r\n        termEndDate: ''\r\n      });\r\n    } else {\r\n      // 폼 열기 - 기본값 설정\r\n      const defaultDate = new Date().toISOString().split('T')[0];\r\n      const newState = { \r\n        name: '', \r\n        employeeNo: '',\r\n        positionLabel: '', \r\n        titleLabel: '',\r\n        phone: '',\r\n        email: '',\r\n        termStartDate: defaultDate,\r\n        termEndDate: ''\r\n      };\r\n      setShowAddForm(true);\r\n      setNewExecutive(newState);\r\n    }\r\n  };\r\n\r\n  // 수정 폼 열기/닫기 핸들러\r\n  const handleShowEditForm = (executive: any) => {\r\n    setEditingExecutive(executive);\r\n    setShowEditForm(true);\r\n  };\r\n\r\n  // 수정 폼 닫기 핸들러\r\n  const handleCloseEditForm = () => {\r\n    setShowEditForm(false);\r\n    setEditingExecutive(null);\r\n  };\r\n\r\n  // 상세 모달 닫기 핸들러\r\n  const handleCloseDetailModal = () => {\r\n    setShowDetailModal(false);\r\n    setSelectedExecutive(null);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (!newExecutive.name || !newExecutive.name.trim()) {\r\n      alert('이름은 필수 입력 항목입니다.');\r\n      return;\r\n    }\r\n    \r\n    createMutation.mutate(newExecutive);\r\n  };\r\n\r\n  const handleEdit = (executive: any) => {\r\n    handleShowEditForm(executive);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    if (editingExecutive && editingExecutive.name) {\r\n      updateMutation.mutate(editingExecutive);\r\n    } else {\r\n      alert('이름은 필수 입력 항목입니다.');\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    if (confirm('정말 삭제하시겠습니까?')) {\r\n      deleteMutation.mutate(id);\r\n    }\r\n  };\r\n\r\n  // 테이블 데이터 준비 (actions 필드 추가)\r\n  const tableData = useMemo(() => {\r\n    if (!Array.isArray(executives) || executives.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const result = executives.map((executive: any) => {\r\n      // 평가상태 데이터 준비\r\n      const evaluationStatus = executive.evaluation?.status || 'NOT_STARTED';\r\n      \r\n      return {\r\n        ...executive,\r\n        evaluationStatus, // 평가상태 필드 추가\r\n        actions: (\r\n          <div className=\"flex items-center space-x-2\">\r\n            <button \r\n              onClick={() => handleEdit(executive)}\r\n              className=\"text-navy-600 hover:text-navy-800 text-sm transition-colors px-2 py-1 rounded hover:bg-navy-50 flex items-center cursor-pointer\"\r\n              title=\"수정\"\r\n            >\r\n              <EditIcon className=\"h-4 w-4\" />\r\n            </button>\r\n            <button \r\n              onClick={() => handleDelete(executive.id)}\r\n              disabled={deleteMutation.isPending}\r\n              className=\"text-red-500 hover:text-red-700 disabled:text-gray-400 text-sm transition-colors px-2 py-1 rounded hover:bg-red-50 flex items-center cursor-pointer\"\r\n              title=\"삭제\"\r\n            >\r\n              <DeleteIcon className=\"h-4 w-4\" />\r\n            </button>\r\n          </div>\r\n        )\r\n      };\r\n    });\r\n\r\n    return result;\r\n  }, [executives, handleEdit, handleDelete, deleteMutation.isPending]);\r\n\r\n\r\n  \r\n  // 에러 상태 표시\r\n  if (error || isError) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-64\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\r\n          <p className=\"text-red-600 text-lg mb-2\">데이터 로드 중 오류가 발생했습니다</p>\r\n          <p className=\"text-gray-600 text-sm\">{error?.message || '알 수 없는 오류'}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 데이터가 없을 때는 DataTable 컴포넌트 내에서 처리하도록 함\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* 수정 폼 */}\r\n      {showEditForm && editingExecutive && (\r\n        <div className=\"bg-gray-50 p-4 rounded-lg border\">\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">임원 정보 수정</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                이름 <span className=\"text-red-500\">*</span>\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"이름을 입력하세요\"\r\n                value={editingExecutive.name}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, name: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                required\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">사번</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"사번을 입력하세요\"\r\n                value={editingExecutive.employeeNo || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, employeeNo: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">직위</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"직위를 입력하세요\"\r\n                value={editingExecutive.positionLabel || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, positionLabel: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">직책</label>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"직책을 입력하세요\"\r\n                value={editingExecutive.titleLabel || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, titleLabel: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">연락처</label>\r\n              <input\r\n                type=\"tel\"\r\n                placeholder=\"연락처를 입력하세요\"\r\n                value={editingExecutive.phone || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, phone: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">이메일</label>\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"이메일을 입력하세요\"\r\n                value={editingExecutive.email || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, email: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">재임시작일</label>\r\n              <input\r\n                type=\"date\"\r\n                value={editingExecutive.termStartDate || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, termStartDate: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">재임종료일</label>\r\n              <input\r\n                type=\"date\"\r\n                value={editingExecutive.termEndDate || ''}\r\n                onChange={(e) => setEditingExecutive({ ...editingExecutive, termEndDate: e.target.value })}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex space-x-2 \">\r\n            <button\r\n              onClick={handleUpdate}\r\n              disabled={updateMutation.isPending || !editingExecutive.name.trim()}\r\n              className=\"bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors flex items-center \"\r\n               \r\n            >\r\n              {updateMutation.isPending ? (\r\n                <>\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                  수정 중...\r\n                </>\r\n              ) : (\r\n                \r\n                '수정'\r\n              )}\r\n            </button>\r\n            <button\r\n              onClick={handleCloseEditForm}\r\n              className=\"bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors cursor-pointer\"\r\n            >\r\n              취소\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {error && (\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"text-red-600 mb-4\">데이터 로딩 실패</div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* DataTable 사용 */}\r\n      <DataTable\r\n        data={tableData}\r\n        columns={tableColumns}\r\n        className=\"w-full\"\r\n        onColumnsChange={handleColumnsChange}\r\n        isLoading={isLoading}\r\n        searchFilters={searchFilters}\r\n        onFilterChange={handleFilterChange}\r\n        filters={filters}\r\n        filterOptions={filterOptions}\r\n        onBulkDelete={handleBulkDelete}\r\n        onSelectionReset={handleSelectionReset}\r\n        enableBulkDelete={true}\r\n        enableRowSelection={true}\r\n        enableAddForm={true}\r\n        showAddForm={showAddForm}\r\n        onShowAddForm={handleShowAddForm}\r\n        formData={newExecutive}\r\n        formFields={formFields}\r\n        onFormDataChange={handleFormDataChange}\r\n        onAdd={handleAdd}\r\n        isAddLoading={createMutation.isPending}\r\n        isNameValid={newExecutive.name.trim().length > 0}\r\n        showActionColumn={true}\r\n      />\r\n\r\n      {/* 페이지네이션 */}\r\n      <Pagination\r\n        currentPage={pagination.page}\r\n        totalPages={pagination.pageCount}\r\n        onPageChange={handlePageChange}\r\n      />\r\n\r\n      {/* 임원 상세 정보 모달 */}\r\n      <ExecutiveDetailModal\r\n        executive={selectedExecutive}\r\n        isOpen={showDetailModal}\r\n        onClose={handleCloseDetailModal}\r\n      />\r\n    </div>\r\n  );\r\n}","import { CreateClientConfig } from \"@/generated/openapi-client/client.gen\";\r\n\r\nexport const createClientConfig: CreateClientConfig = (config) => ({\r\n  ...config,\r\n  baseUrl: '/api/backend',\r\n  fetch: (input: RequestInfo | URL, init?: RequestInit) => {\r\n    // 서버 사이드에서는 global.fetch 사용, 클라이언트에서는 window.fetch 사용\r\n    if (typeof window !== 'undefined') {\r\n      return window.fetch(input, init);\r\n    } else {\r\n      // 서버 사이드에서는 global.fetch 사용\r\n      return global.fetch(input, init);\r\n    }\r\n  },\r\n});","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { ClientOptions } from './types.gen';\r\nimport { type Config, type ClientOptions as DefaultClientOptions, createClient, createConfig } from './client';\r\nimport { createClientConfig } from '../../config/openapi-runtime';\r\n\r\n/**\r\n * The `createClientConfig()` function will be called on client initialization\r\n * and the returned object will become the client's initial configuration.\r\n *\r\n * You may want to initialize your client this way instead of calling\r\n * `setConfig()`. This is useful for example if you're using Next.js\r\n * to ensure your client always has the correct values.\r\n */\r\nexport type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> = (override?: Config<DefaultClientOptions & T>) => Config<Required<DefaultClientOptions> & T>;\r\n\r\nexport const client = createClient(createClientConfig(createConfig<ClientOptions>()));","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type {\r\n  ArrayStyle,\r\n  ObjectStyle,\r\n  SerializerOptions,\r\n} from './pathSerializer.gen';\r\n\r\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\r\n\r\nexport type BodySerializer = (body: any) => any;\r\n\r\nexport interface QuerySerializerOptions {\r\n  allowReserved?: boolean;\r\n  array?: SerializerOptions<ArrayStyle>;\r\n  object?: SerializerOptions<ObjectStyle>;\r\n}\r\n\r\nconst serializeFormDataPair = (\r\n  data: FormData,\r\n  key: string,\r\n  value: unknown,\r\n): void => {\r\n  if (typeof value === 'string' || value instanceof Blob) {\r\n    data.append(key, value);\r\n  } else if (value instanceof Date) {\r\n    data.append(key, value.toISOString());\r\n  } else {\r\n    data.append(key, JSON.stringify(value));\r\n  }\r\n};\r\n\r\nconst serializeUrlSearchParamsPair = (\r\n  data: URLSearchParams,\r\n  key: string,\r\n  value: unknown,\r\n): void => {\r\n  if (typeof value === 'string') {\r\n    data.append(key, value);\r\n  } else {\r\n    data.append(key, JSON.stringify(value));\r\n  }\r\n};\r\n\r\nexport const formDataBodySerializer = {\r\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\r\n    body: T,\r\n  ): FormData => {\r\n    const data = new FormData();\r\n\r\n    Object.entries(body).forEach(([key, value]) => {\r\n      if (value === undefined || value === null) {\r\n        return;\r\n      }\r\n      if (Array.isArray(value)) {\r\n        value.forEach((v) => serializeFormDataPair(data, key, v));\r\n      } else {\r\n        serializeFormDataPair(data, key, value);\r\n      }\r\n    });\r\n\r\n    return data;\r\n  },\r\n};\r\n\r\nexport const jsonBodySerializer = {\r\n  bodySerializer: <T>(body: T): string =>\r\n    JSON.stringify(body, (_key, value) =>\r\n      typeof value === 'bigint' ? value.toString() : value,\r\n    ),\r\n};\r\n\r\nexport const urlSearchParamsBodySerializer = {\r\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\r\n    body: T,\r\n  ): string => {\r\n    const data = new URLSearchParams();\r\n\r\n    Object.entries(body).forEach(([key, value]) => {\r\n      if (value === undefined || value === null) {\r\n        return;\r\n      }\r\n      if (Array.isArray(value)) {\r\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\r\n      } else {\r\n        serializeUrlSearchParamsPair(data, key, value);\r\n      }\r\n    });\r\n\r\n    return data.toString();\r\n  },\r\n};\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport { getAuthToken } from '../core/auth.gen';\r\nimport type {\r\n  QuerySerializer,\r\n  QuerySerializerOptions,\r\n} from '../core/bodySerializer.gen';\r\nimport { jsonBodySerializer } from '../core/bodySerializer.gen';\r\nimport {\r\n  serializeArrayParam,\r\n  serializeObjectParam,\r\n  serializePrimitiveParam,\r\n} from '../core/pathSerializer.gen';\r\nimport type { Client, ClientOptions, Config, RequestOptions } from './types.gen';\r\n\r\ninterface PathSerializer {\r\n  path: Record<string, unknown>;\r\n  url: string;\r\n}\r\n\r\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\r\n\r\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\r\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\r\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\r\n\r\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\r\n  let url = _url;\r\n  const matches = _url.match(PATH_PARAM_RE);\r\n  if (matches) {\r\n    for (const match of matches) {\r\n      let explode = false;\r\n      let name = match.substring(1, match.length - 1);\r\n      let style: ArraySeparatorStyle = 'simple';\r\n\r\n      if (name.endsWith('*')) {\r\n        explode = true;\r\n        name = name.substring(0, name.length - 1);\r\n      }\r\n\r\n      if (name.startsWith('.')) {\r\n        name = name.substring(1);\r\n        style = 'label';\r\n      } else if (name.startsWith(';')) {\r\n        name = name.substring(1);\r\n        style = 'matrix';\r\n      }\r\n\r\n      const value = path[name];\r\n\r\n      if (value === undefined || value === null) {\r\n        continue;\r\n      }\r\n\r\n      if (Array.isArray(value)) {\r\n        url = url.replace(\r\n          match,\r\n          serializeArrayParam({ explode, name, style, value }),\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (typeof value === 'object') {\r\n        url = url.replace(\r\n          match,\r\n          serializeObjectParam({\r\n            explode,\r\n            name,\r\n            style,\r\n            value: value as Record<string, unknown>,\r\n            valueOnly: true,\r\n          }),\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (style === 'matrix') {\r\n        url = url.replace(\r\n          match,\r\n          `;${serializePrimitiveParam({\r\n            name,\r\n            value: value as string,\r\n          })}`,\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const replaceValue = encodeURIComponent(\r\n        style === 'label' ? `.${value as string}` : (value as string),\r\n      );\r\n      url = url.replace(match, replaceValue);\r\n    }\r\n  }\r\n  return url;\r\n};\r\n\r\nexport const createQuerySerializer = <T = unknown>({\r\n  allowReserved,\r\n  array,\r\n  object,\r\n}: QuerySerializerOptions = {}) => {\r\n  const querySerializer = (queryParams: T) => {\r\n    const search: string[] = [];\r\n    if (queryParams && typeof queryParams === 'object') {\r\n      for (const name in queryParams) {\r\n        const value = queryParams[name];\r\n\r\n        if (value === undefined || value === null) {\r\n          continue;\r\n        }\r\n\r\n        if (Array.isArray(value)) {\r\n          const serializedArray = serializeArrayParam({\r\n            allowReserved,\r\n            explode: true,\r\n            name,\r\n            style: 'form',\r\n            value,\r\n            ...array,\r\n          });\r\n          if (serializedArray) search.push(serializedArray);\r\n        } else if (typeof value === 'object') {\r\n          const serializedObject = serializeObjectParam({\r\n            allowReserved,\r\n            explode: true,\r\n            name,\r\n            style: 'deepObject',\r\n            value: value as Record<string, unknown>,\r\n            ...object,\r\n          });\r\n          if (serializedObject) search.push(serializedObject);\r\n        } else {\r\n          const serializedPrimitive = serializePrimitiveParam({\r\n            allowReserved,\r\n            name,\r\n            value: value as string,\r\n          });\r\n          if (serializedPrimitive) search.push(serializedPrimitive);\r\n        }\r\n      }\r\n    }\r\n    return search.join('&');\r\n  };\r\n  return querySerializer;\r\n};\r\n\r\n/**\r\n * Infers parseAs value from provided Content-Type header.\r\n */\r\nexport const getParseAs = (\r\n  contentType: string | null,\r\n): Exclude<Config['parseAs'], 'auto'> => {\r\n  if (!contentType) {\r\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\r\n    // which is effectively the same as the 'stream' option.\r\n    return 'stream';\r\n  }\r\n\r\n  const cleanContent = contentType.split(';')[0]?.trim();\r\n\r\n  if (!cleanContent) {\r\n    return;\r\n  }\r\n\r\n  if (\r\n    cleanContent.startsWith('application/json') ||\r\n    cleanContent.endsWith('+json')\r\n  ) {\r\n    return 'json';\r\n  }\r\n\r\n  if (cleanContent === 'multipart/form-data') {\r\n    return 'formData';\r\n  }\r\n\r\n  if (\r\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\r\n      cleanContent.startsWith(type),\r\n    )\r\n  ) {\r\n    return 'blob';\r\n  }\r\n\r\n  if (cleanContent.startsWith('text/')) {\r\n    return 'text';\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nconst checkForExistence = (\r\n  options: Pick<RequestOptions, 'auth' | 'query'> & {\r\n    headers: Headers;\r\n  },\r\n  name?: string,\r\n): boolean => {\r\n  if (!name) {\r\n    return false;\r\n  }\r\n  if (\r\n    options.headers.has(name) ||\r\n    options.query?.[name] ||\r\n    options.headers.get('Cookie')?.includes(`${name}=`)\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const setAuthParams = async ({\r\n  security,\r\n  ...options\r\n}: Pick<Required<RequestOptions>, 'security'> &\r\n  Pick<RequestOptions, 'auth' | 'query'> & {\r\n    headers: Headers;\r\n  }) => {\r\n  for (const auth of security) {\r\n    if (checkForExistence(options, auth.name)) {\r\n      continue;\r\n    }\r\n    const token = await getAuthToken(auth, options.auth);\r\n\r\n    if (!token) {\r\n      continue;\r\n    }\r\n\r\n    const name = auth.name ?? 'Authorization';\r\n\r\n    switch (auth.in) {\r\n      case 'query':\r\n        if (!options.query) {\r\n          options.query = {};\r\n        }\r\n        options.query[name] = token;\r\n        break;\r\n      case 'cookie':\r\n        options.headers.append('Cookie', `${name}=${token}`);\r\n        break;\r\n      case 'header':\r\n      default:\r\n        options.headers.set(name, token);\r\n        break;\r\n    }\r\n  }\r\n};\r\n\r\nexport const buildUrl: Client['buildUrl'] = (options) => {\r\n  const url = getUrl({\r\n    baseUrl: options.baseUrl as string,\r\n    path: options.path,\r\n    query: options.query,\r\n    querySerializer:\r\n      typeof options.querySerializer === 'function'\r\n        ? options.querySerializer\r\n        : createQuerySerializer(options.querySerializer),\r\n    url: options.url,\r\n  });\r\n  return url;\r\n};\r\n\r\nexport const getUrl = ({\r\n  baseUrl,\r\n  path,\r\n  query,\r\n  querySerializer,\r\n  url: _url,\r\n}: {\r\n  baseUrl?: string;\r\n  path?: Record<string, unknown>;\r\n  query?: Record<string, unknown>;\r\n  querySerializer: QuerySerializer;\r\n  url: string;\r\n}) => {\r\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\r\n  let url = (baseUrl ?? '') + pathUrl;\r\n  if (path) {\r\n    url = defaultPathSerializer({ path, url });\r\n  }\r\n  let search = query ? querySerializer(query) : '';\r\n  if (search.startsWith('?')) {\r\n    search = search.substring(1);\r\n  }\r\n  if (search) {\r\n    url += `?${search}`;\r\n  }\r\n  return url;\r\n};\r\n\r\nexport const mergeConfigs = (a: Config, b: Config): Config => {\r\n  const config = { ...a, ...b };\r\n  if (config.baseUrl?.endsWith('/')) {\r\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\r\n  }\r\n  config.headers = mergeHeaders(a.headers, b.headers);\r\n  return config;\r\n};\r\n\r\nexport const mergeHeaders = (\r\n  ...headers: Array<Required<Config>['headers'] | undefined>\r\n): Headers => {\r\n  const mergedHeaders = new Headers();\r\n  for (const header of headers) {\r\n    if (!header || typeof header !== 'object') {\r\n      continue;\r\n    }\r\n\r\n    const iterator =\r\n      header instanceof Headers ? header.entries() : Object.entries(header);\r\n\r\n    for (const [key, value] of iterator) {\r\n      if (value === null) {\r\n        mergedHeaders.delete(key);\r\n      } else if (Array.isArray(value)) {\r\n        for (const v of value) {\r\n          mergedHeaders.append(key, v as string);\r\n        }\r\n      } else if (value !== undefined) {\r\n        // assume object headers are meant to be JSON stringified, i.e. their\r\n        // content value in OpenAPI specification is 'application/json'\r\n        mergedHeaders.set(\r\n          key,\r\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return mergedHeaders;\r\n};\r\n\r\ntype ErrInterceptor<Err, Res, Options> = (\r\n  error: Err,\r\n  response: Res,\r\n  options: Options,\r\n) => Err | Promise<Err>;\r\n\r\ntype ReqInterceptor<Options> = (options: Options) => void | Promise<void>;\r\n\r\ntype ResInterceptor<Res, Options> = (\r\n  response: Res,\r\n  options: Options,\r\n) => Res | Promise<Res>;\r\n\r\nclass Interceptors<Interceptor> {\r\n  _fns: (Interceptor | null)[];\r\n\r\n  constructor() {\r\n    this._fns = [];\r\n  }\r\n\r\n  clear() {\r\n    this._fns = [];\r\n  }\r\n\r\n  getInterceptorIndex(id: number | Interceptor): number {\r\n    if (typeof id === 'number') {\r\n      return this._fns[id] ? id : -1;\r\n    } else {\r\n      return this._fns.indexOf(id);\r\n    }\r\n  }\r\n  exists(id: number | Interceptor) {\r\n    const index = this.getInterceptorIndex(id);\r\n    return !!this._fns[index];\r\n  }\r\n\r\n  eject(id: number | Interceptor) {\r\n    const index = this.getInterceptorIndex(id);\r\n    if (this._fns[index]) {\r\n      this._fns[index] = null;\r\n    }\r\n  }\r\n\r\n  update(id: number | Interceptor, fn: Interceptor) {\r\n    const index = this.getInterceptorIndex(id);\r\n    if (this._fns[index]) {\r\n      this._fns[index] = fn;\r\n      return id;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  use(fn: Interceptor) {\r\n    this._fns = [...this._fns, fn];\r\n    return this._fns.length - 1;\r\n  }\r\n}\r\n\r\n// `createInterceptors()` response, meant for external use as it does not\r\n// expose internals\r\nexport interface Middleware<Res, Err, Options> {\r\n  error: Pick<Interceptors<ErrInterceptor<Err, Res, Options>>, 'eject' | 'use'>;\r\n  request: Pick<Interceptors<ReqInterceptor<Options>>, 'eject' | 'use'>;\r\n  response: Pick<Interceptors<ResInterceptor<Res, Options>>, 'eject' | 'use'>;\r\n}\r\n\r\n// do not add `Middleware` as return type so we can use _fns internally\r\nexport const createInterceptors = <Res, Err, Options>() => ({\r\n  error: new Interceptors<ErrInterceptor<Err, Res, Options>>(),\r\n  request: new Interceptors<ReqInterceptor<Options>>(),\r\n  response: new Interceptors<ResInterceptor<Res, Options>>(),\r\n});\r\n\r\nconst defaultQuerySerializer = createQuerySerializer({\r\n  allowReserved: false,\r\n  array: {\r\n    explode: true,\r\n    style: 'form',\r\n  },\r\n  object: {\r\n    explode: true,\r\n    style: 'deepObject',\r\n  },\r\n});\r\n\r\nconst defaultHeaders = {\r\n  'Content-Type': 'application/json',\r\n};\r\n\r\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\r\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\r\n): Config<Omit<ClientOptions, keyof T> & T> => ({\r\n  ...jsonBodySerializer,\r\n  headers: defaultHeaders,\r\n  parseAs: 'auto',\r\n  querySerializer: defaultQuerySerializer,\r\n  ...override,\r\n});\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { Options as ClientOptions, TDataShape, Client } from './client';\r\nimport type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerTestUserData, AppControllerTestUserResponses, AppControllerTestUserErrors, ResponsibilitiesControllerFindAllData, ResponsibilitiesControllerFindAllResponses, ResponsibilitiesControllerCreateData, ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ResponsibilitiesControllerRemoveData, ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ResponsibilitiesControllerFindOneData, ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ResponsibilitiesControllerUpdateData, ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ResponsibilitiesControllerGetCategoriesData, ResponsibilitiesControllerGetCategoriesResponses, ExecutivesControllerFindAllData, ExecutivesControllerFindAllResponses, ExecutivesControllerCreateData, ExecutivesControllerCreateResponses, ExecutivesControllerCreateErrors, ExecutivesControllerSearchData, ExecutivesControllerSearchResponses, ExecutivesControllerFindByNameData, ExecutivesControllerFindByNameResponses, ExecutivesControllerRemoveData, ExecutivesControllerRemoveResponses, ExecutivesControllerRemoveErrors, ExecutivesControllerFindOneData, ExecutivesControllerFindOneResponses, ExecutivesControllerFindOneErrors, ExecutivesControllerUpdateData, ExecutivesControllerUpdateResponses, ExecutivesControllerUpdateErrors, OrgRegistrationsControllerFindAllData, OrgRegistrationsControllerFindAllResponses, OrgRegistrationsControllerCreateData, OrgRegistrationsControllerCreateResponses, OrgRegistrationsControllerCreateErrors, OrgRegistrationsControllerRemoveData, OrgRegistrationsControllerRemoveResponses, OrgRegistrationsControllerRemoveErrors, OrgRegistrationsControllerFindOneData, OrgRegistrationsControllerFindOneResponses, OrgRegistrationsControllerFindOneErrors, OrgRegistrationsControllerUpdateData, OrgRegistrationsControllerUpdateResponses, OrgRegistrationsControllerUpdateErrors, OrgRegistrationsControllerRemoveByExecutiveIdData, OrgRegistrationsControllerRemoveByExecutiveIdResponses, OrgRegistrationsControllerRemoveByExecutiveIdErrors, OrgRegistrationsControllerFindByExecutiveIdData, OrgRegistrationsControllerFindByExecutiveIdResponses, OrgRegistrationsControllerFindByExecutiveIdErrors, QualiItemDtoTsControllerFindAllData, QualiItemDtoTsControllerFindAllResponses, QualiItemDtoTsControllerCreateData, QualiItemDtoTsControllerCreateResponses, QualiItemDtoTsControllerCreateErrors, QualiItemDtoTsControllerRemoveData, QualiItemDtoTsControllerRemoveResponses, QualiItemDtoTsControllerRemoveErrors, QualiItemDtoTsControllerFindOneData, QualiItemDtoTsControllerFindOneResponses, QualiItemDtoTsControllerFindOneErrors, QualiItemDtoTsControllerUpdateData, QualiItemDtoTsControllerUpdateResponses, QualiItemDtoTsControllerUpdateErrors, QualiItemDtoTsControllerRemoveByExecutiveIdData, QualiItemDtoTsControllerRemoveByExecutiveIdResponses, QualiItemDtoTsControllerRemoveByExecutiveIdErrors, QualiItemDtoTsControllerFindByExecutiveIdData, QualiItemDtoTsControllerFindByExecutiveIdResponses, QualiItemDtoTsControllerFindByExecutiveIdErrors, QualiItemDtoTsControllerFindByTypeData, QualiItemDtoTsControllerFindByTypeResponses, IntegrityItemControllerFindAllData, IntegrityItemControllerFindAllResponses, IntegrityItemControllerCreateData, IntegrityItemControllerCreateResponses, IntegrityItemControllerCreateErrors, IntegrityItemControllerRemoveData, IntegrityItemControllerRemoveResponses, IntegrityItemControllerRemoveErrors, IntegrityItemControllerFindOneData, IntegrityItemControllerFindOneResponses, IntegrityItemControllerFindOneErrors, IntegrityItemControllerUpdateData, IntegrityItemControllerUpdateResponses, IntegrityItemControllerUpdateErrors, IntegrityItemControllerRemoveByExecutiveIdData, IntegrityItemControllerRemoveByExecutiveIdResponses, IntegrityItemControllerRemoveByExecutiveIdErrors, IntegrityItemControllerFindByExecutiveIdData, IntegrityItemControllerFindByExecutiveIdResponses, IntegrityItemControllerFindByExecutiveIdErrors, IntegrityItemControllerFindByCategoryData, IntegrityItemControllerFindByCategoryResponses, EvaluationsControllerFindByExecutiveIdData, EvaluationsControllerFindByExecutiveIdResponses, EvaluationsControllerFindByExecutiveIdErrors, EvaluationsControllerCreateForExecutiveData, EvaluationsControllerCreateForExecutiveResponses, EvaluationsControllerCreateForExecutiveErrors, EvaluationsControllerRemoveData, EvaluationsControllerRemoveResponses, EvaluationsControllerRemoveErrors, EvaluationsControllerFindOneData, EvaluationsControllerFindOneResponses, EvaluationsControllerFindOneErrors, EvaluationsControllerUpdateData, EvaluationsControllerUpdateResponses, EvaluationsControllerUpdateErrors, EvaluationsControllerSaveDraftData, EvaluationsControllerSaveDraftResponses, EvaluationsControllerSaveDraftErrors } from './types.gen';\r\nimport { client as _heyApiClient } from './client.gen';\r\n\r\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\r\n    /**\r\n     * You can provide a client instance returned by `createClient()` instead of\r\n     * individual options. This might be also useful if you want to implement a\r\n     * custom client.\r\n     */\r\n    client?: Client;\r\n    /**\r\n     * You can pass arbitrary values through the `meta` object. This can be\r\n     * used to access values that aren't defined as part of the SDK function.\r\n     */\r\n    meta?: Record<string, unknown>;\r\n};\r\n\r\nexport const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({\r\n        url: '/',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 사용자 테스트 API\r\n * JWT 토큰으로 인증된 사용자 정보 조회\r\n */\r\nexport const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<AppControllerTestUserResponses, AppControllerTestUserErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/user-test',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 책무 목록 조회\r\n * 모든 책무 목록을 조회합니다.\r\n */\r\nexport const responsibilitiesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerFindAllData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerFindAllResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 책무 생성\r\n * 새로운 책무를 생성합니다.\r\n */\r\nexport const responsibilitiesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerCreateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<ResponsibilitiesControllerCreateResponses, ResponsibilitiesControllerCreateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 책무 삭제\r\n * 책무를 삭제합니다.\r\n */\r\nexport const responsibilitiesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<ResponsibilitiesControllerRemoveResponses, ResponsibilitiesControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 책무 상세 조회\r\n * 특정 책무의 상세 정보를 조회합니다.\r\n */\r\nexport const responsibilitiesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<ResponsibilitiesControllerFindOneResponses, ResponsibilitiesControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 책무 수정\r\n * 기존 책무 정보를 수정합니다.\r\n */\r\nexport const responsibilitiesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ResponsibilitiesControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<ResponsibilitiesControllerUpdateResponses, ResponsibilitiesControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 책무구분 목록 조회\r\n * 모든 책무구분 목록을 조회합니다.\r\n */\r\nexport const responsibilitiesControllerGetCategories = <ThrowOnError extends boolean = false>(options?: Options<ResponsibilitiesControllerGetCategoriesData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<ResponsibilitiesControllerGetCategoriesResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/responsibilities/categories/list',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 모든 임원 조회\r\n */\r\nexport const executivesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ExecutivesControllerFindAllData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<ExecutivesControllerFindAllResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 생성\r\n */\r\nexport const executivesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerCreateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<ExecutivesControllerCreateResponses, ExecutivesControllerCreateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 목록 검색 (offset 기반 페이지네이션)\r\n */\r\nexport const executivesControllerSearch = <ThrowOnError extends boolean = false>(options?: Options<ExecutivesControllerSearchData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<ExecutivesControllerSearchResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives/search',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 이름으로 임원 검색\r\n */\r\nexport const executivesControllerFindByName = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerFindByNameData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<ExecutivesControllerFindByNameResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives/search/{name}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 삭제\r\n */\r\nexport const executivesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<ExecutivesControllerRemoveResponses, ExecutivesControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 단건 조회\r\n */\r\nexport const executivesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<ExecutivesControllerFindOneResponses, ExecutivesControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 수정\r\n */\r\nexport const executivesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ExecutivesControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<ExecutivesControllerUpdateResponses, ExecutivesControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/executives/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 모든 조직등록 조회\r\n */\r\nexport const orgRegistrationsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<OrgRegistrationsControllerFindAllData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<OrgRegistrationsControllerFindAllResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 조직등록 생성\r\n */\r\nexport const orgRegistrationsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerCreateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<OrgRegistrationsControllerCreateResponses, OrgRegistrationsControllerCreateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 조직등록 삭제\r\n */\r\nexport const orgRegistrationsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<OrgRegistrationsControllerRemoveResponses, OrgRegistrationsControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 조직등록 단건 조회\r\n */\r\nexport const orgRegistrationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<OrgRegistrationsControllerFindOneResponses, OrgRegistrationsControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 조직등록 수정\r\n */\r\nexport const orgRegistrationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<OrgRegistrationsControllerUpdateResponses, OrgRegistrationsControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 조직등록 삭제\r\n */\r\nexport const orgRegistrationsControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerRemoveByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<OrgRegistrationsControllerRemoveByExecutiveIdResponses, OrgRegistrationsControllerRemoveByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 조직등록 조회\r\n */\r\nexport const orgRegistrationsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<OrgRegistrationsControllerFindByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<OrgRegistrationsControllerFindByExecutiveIdResponses, OrgRegistrationsControllerFindByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/org-registrations/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 모든 업무경험/전문성 항목 조회\r\n */\r\nexport const qualiItemDtoTsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<QualiItemDtoTsControllerFindAllData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindAllResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 업무경험/전문성 항목 생성\r\n */\r\nexport const qualiItemDtoTsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerCreateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<QualiItemDtoTsControllerCreateResponses, QualiItemDtoTsControllerCreateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 업무경험/전문성 항목 삭제\r\n */\r\nexport const qualiItemDtoTsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<QualiItemDtoTsControllerRemoveResponses, QualiItemDtoTsControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 업무경험/전문성 항목 단건 조회\r\n */\r\nexport const qualiItemDtoTsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindOneResponses, QualiItemDtoTsControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 업무경험/전문성 항목 수정\r\n */\r\nexport const qualiItemDtoTsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<QualiItemDtoTsControllerUpdateResponses, QualiItemDtoTsControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 모든 업무경험/전문성 항목 삭제\r\n */\r\nexport const qualiItemDtoTsControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerRemoveByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<QualiItemDtoTsControllerRemoveByExecutiveIdResponses, QualiItemDtoTsControllerRemoveByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 업무경험/전문성 항목 조회\r\n */\r\nexport const qualiItemDtoTsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindByExecutiveIdResponses, QualiItemDtoTsControllerFindByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 유형별 업무경험/전문성 항목 조회\r\n */\r\nexport const qualiItemDtoTsControllerFindByType = <ThrowOnError extends boolean = false>(options: Options<QualiItemDtoTsControllerFindByTypeData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<QualiItemDtoTsControllerFindByTypeResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/quali-items/type/{type}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 모든 정직성 항목 조회\r\n */\r\nexport const integrityItemControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<IntegrityItemControllerFindAllData, ThrowOnError>) => {\r\n    return (options?.client ?? _heyApiClient).get<IntegrityItemControllerFindAllResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 정직성 항목 생성\r\n */\r\nexport const integrityItemControllerCreate = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerCreateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<IntegrityItemControllerCreateResponses, IntegrityItemControllerCreateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 정직성 항목 삭제\r\n */\r\nexport const integrityItemControllerRemove = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<IntegrityItemControllerRemoveResponses, IntegrityItemControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 정직성 항목 단건 조회\r\n */\r\nexport const integrityItemControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindOneResponses, IntegrityItemControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 정직성 항목 수정\r\n */\r\nexport const integrityItemControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<IntegrityItemControllerUpdateResponses, IntegrityItemControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 모든 정직성 항목 삭제\r\n */\r\nexport const integrityItemControllerRemoveByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerRemoveByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<IntegrityItemControllerRemoveByExecutiveIdResponses, IntegrityItemControllerRemoveByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 특정 임원의 정직성 항목 조회\r\n */\r\nexport const integrityItemControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindByExecutiveIdResponses, IntegrityItemControllerFindByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 카테고리별 정직성 항목 조회\r\n */\r\nexport const integrityItemControllerFindByCategory = <ThrowOnError extends boolean = false>(options: Options<IntegrityItemControllerFindByCategoryData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<IntegrityItemControllerFindByCategoryResponses, unknown, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/integrity-items/category/{category}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 평가 조회\r\n */\r\nexport const evaluationsControllerFindByExecutiveId = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerFindByExecutiveIdData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<EvaluationsControllerFindByExecutiveIdResponses, EvaluationsControllerFindByExecutiveIdErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/executive/{executiveId}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 임원 평가 생성\r\n */\r\nexport const evaluationsControllerCreateForExecutive = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerCreateForExecutiveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).post<EvaluationsControllerCreateForExecutiveResponses, EvaluationsControllerCreateForExecutiveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/executive/{executiveId}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 평가 삭제\r\n */\r\nexport const evaluationsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerRemoveData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).delete<EvaluationsControllerRemoveResponses, EvaluationsControllerRemoveErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 평가 단건 조회\r\n */\r\nexport const evaluationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerFindOneData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).get<EvaluationsControllerFindOneResponses, EvaluationsControllerFindOneErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/{id}',\r\n        ...options\r\n    });\r\n};\r\n\r\n/**\r\n * 평가 수정\r\n */\r\nexport const evaluationsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerUpdateData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).patch<EvaluationsControllerUpdateResponses, EvaluationsControllerUpdateErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/{id}',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * 평가 임시저장\r\n * IN_PROGRESS 상태로 저장\r\n */\r\nexport const evaluationsControllerSaveDraft = <ThrowOnError extends boolean = false>(options: Options<EvaluationsControllerSaveDraftData, ThrowOnError>) => {\r\n    return (options.client ?? _heyApiClient).put<EvaluationsControllerSaveDraftResponses, EvaluationsControllerSaveDraftErrors, ThrowOnError>({\r\n        security: [\r\n            {\r\n                scheme: 'bearer',\r\n                type: 'http'\r\n            }\r\n        ],\r\n        url: '/evaluations/{id}/draft',\r\n        ...options,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...options.headers\r\n        }\r\n    });\r\n};","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nexport type AuthToken = string | undefined;\r\n\r\nexport interface Auth {\r\n  /**\r\n   * Which part of the request do we use to send the auth?\r\n   *\r\n   * @default 'header'\r\n   */\r\n  in?: 'header' | 'query' | 'cookie';\r\n  /**\r\n   * Header or query parameter name.\r\n   *\r\n   * @default 'Authorization'\r\n   */\r\n  name?: string;\r\n  scheme?: 'basic' | 'bearer';\r\n  type: 'apiKey' | 'http';\r\n}\r\n\r\nexport const getAuthToken = async (\r\n  auth: Auth,\r\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\r\n): Promise<string | undefined> => {\r\n  const token =\r\n    typeof callback === 'function' ? await callback(auth) : callback;\r\n\r\n  if (!token) {\r\n    return;\r\n  }\r\n\r\n  if (auth.scheme === 'bearer') {\r\n    return `Bearer ${token}`;\r\n  }\r\n\r\n  if (auth.scheme === 'basic') {\r\n    return `Basic ${btoa(token)}`;\r\n  }\r\n\r\n  return token;\r\n};\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport { createSseClient } from '../core/serverSentEvents.gen';\r\nimport type { HttpMethod } from '../core/types.gen';\r\nimport type {\r\n  Client,\r\n  Config,\r\n  RequestOptions,\r\n  ResolvedRequestOptions,\r\n} from './types.gen';\r\nimport {\r\n  buildUrl,\r\n  createConfig,\r\n  createInterceptors,\r\n  getParseAs,\r\n  mergeConfigs,\r\n  mergeHeaders,\r\n  setAuthParams,\r\n} from './utils.gen';\r\n\r\ntype ReqInit = Omit<RequestInit, 'body' | 'headers'> & {\r\n  body?: any;\r\n  headers: ReturnType<typeof mergeHeaders>;\r\n};\r\n\r\nexport const createClient = (config: Config = {}): Client => {\r\n  let _config = mergeConfigs(createConfig(), config);\r\n\r\n  const getConfig = (): Config => ({ ..._config });\r\n\r\n  const setConfig = (config: Config): Config => {\r\n    _config = mergeConfigs(_config, config);\r\n    return getConfig();\r\n  };\r\n\r\n  const interceptors = createInterceptors<\r\n    Response,\r\n    unknown,\r\n    ResolvedRequestOptions\r\n  >();\r\n\r\n  const beforeRequest = async (options: RequestOptions) => {\r\n    const opts = {\r\n      ..._config,\r\n      ...options,\r\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\r\n      headers: mergeHeaders(_config.headers, options.headers),\r\n      serializedBody: undefined,\r\n    };\r\n\r\n    if (opts.security) {\r\n      await setAuthParams({\r\n        ...opts,\r\n        security: opts.security,\r\n      });\r\n    }\r\n\r\n    if (opts.requestValidator) {\r\n      await opts.requestValidator(opts);\r\n    }\r\n\r\n    if (opts.body && opts.bodySerializer) {\r\n      opts.serializedBody = opts.bodySerializer(opts.body);\r\n    }\r\n\r\n    // remove Content-Type header if body is empty to avoid sending invalid requests\r\n    if (opts.serializedBody === undefined || opts.serializedBody === '') {\r\n      opts.headers.delete('Content-Type');\r\n    }\r\n\r\n    const url = buildUrl(opts);\r\n\r\n    return { opts, url };\r\n  };\r\n\r\n  // @ts-expect-error\r\n  const request: Client['request'] = async (options) => {\r\n    // @ts-expect-error\r\n    const { opts, url } = await beforeRequest(options);\r\n\r\n    for (const fn of interceptors.request._fns) {\r\n      if (fn) {\r\n        await fn(opts);\r\n      }\r\n    }\r\n\r\n    // fetch must be assigned here, otherwise it would throw the error:\r\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\r\n    const _fetch = opts.fetch!;\r\n    let response = await _fetch(url, {\r\n      ...opts,\r\n      body: opts.serializedBody as ReqInit['body'],\r\n    });\r\n\r\n    for (const fn of interceptors.response._fns) {\r\n      if (fn) {\r\n        response = await fn(response, opts);\r\n      }\r\n    }\r\n\r\n    const result = {\r\n      response,\r\n    };\r\n\r\n    if (response.ok) {\r\n      if (\r\n        response.status === 204 ||\r\n        response.headers.get('Content-Length') === '0'\r\n      ) {\r\n        return {\r\n          data: {},\r\n          ...result,\r\n        };\r\n      }\r\n\r\n      const parseAs =\r\n        (opts.parseAs === 'auto'\r\n          ? getParseAs(response.headers.get('Content-Type'))\r\n          : opts.parseAs) ?? 'json';\r\n\r\n      let data: any;\r\n      switch (parseAs) {\r\n        case 'arrayBuffer':\r\n        case 'blob':\r\n        case 'formData':\r\n        case 'json':\r\n        case 'text':\r\n          data = await response[parseAs]();\r\n          break;\r\n        case 'stream':\r\n          return {\r\n            data: response.body,\r\n            ...result,\r\n          };\r\n      }\r\n\r\n      if (parseAs === 'json') {\r\n        if (opts.responseValidator) {\r\n          await opts.responseValidator(data);\r\n        }\r\n\r\n        if (opts.responseTransformer) {\r\n          data = await opts.responseTransformer(data);\r\n        }\r\n      }\r\n\r\n      return {\r\n        data,\r\n        ...result,\r\n      };\r\n    }\r\n\r\n    const textError = await response.text();\r\n    let jsonError: unknown;\r\n\r\n    try {\r\n      jsonError = JSON.parse(textError);\r\n    } catch {\r\n      // noop\r\n    }\r\n\r\n    const error = jsonError ?? textError;\r\n    let finalError = error;\r\n\r\n    for (const fn of interceptors.error._fns) {\r\n      if (fn) {\r\n        finalError = (await fn(error, response, opts)) as string;\r\n      }\r\n    }\r\n\r\n    finalError = finalError || ({} as string);\r\n\r\n    if (opts.throwOnError) {\r\n      throw finalError;\r\n    }\r\n\r\n    return {\r\n      error: finalError,\r\n      ...result,\r\n    };\r\n  };\r\n\r\n  const makeMethodFn =\r\n    (method: Uppercase<HttpMethod>) => (options: RequestOptions) =>\r\n      request({ ...options, method });\r\n\r\n  const makeSseFn =\r\n    (method: Uppercase<HttpMethod>) => async (options: RequestOptions) => {\r\n      const { opts, url } = await beforeRequest(options);\r\n      return createSseClient({\r\n        ...opts,\r\n        body: opts.body as BodyInit | null | undefined,\r\n        headers: opts.headers as unknown as Record<string, string>,\r\n        method,\r\n        url,\r\n      });\r\n    };\r\n\r\n  return {\r\n    buildUrl,\r\n    connect: makeMethodFn('CONNECT'),\r\n    delete: makeMethodFn('DELETE'),\r\n    get: makeMethodFn('GET'),\r\n    getConfig,\r\n    head: makeMethodFn('HEAD'),\r\n    interceptors,\r\n    options: makeMethodFn('OPTIONS'),\r\n    patch: makeMethodFn('PATCH'),\r\n    post: makeMethodFn('POST'),\r\n    put: makeMethodFn('PUT'),\r\n    request,\r\n    setConfig,\r\n    sse: {\r\n      connect: makeSseFn('CONNECT'),\r\n      delete: makeSseFn('DELETE'),\r\n      get: makeSseFn('GET'),\r\n      head: makeSseFn('HEAD'),\r\n      options: makeSseFn('OPTIONS'),\r\n      patch: makeSseFn('PATCH'),\r\n      post: makeSseFn('POST'),\r\n      put: makeSseFn('PUT'),\r\n      trace: makeSseFn('TRACE'),\r\n    },\r\n    trace: makeMethodFn('TRACE'),\r\n  } as Client;\r\n};\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\ninterface SerializeOptions<T>\r\n  extends SerializePrimitiveOptions,\r\n    SerializerOptions<T> {}\r\n\r\ninterface SerializePrimitiveOptions {\r\n  allowReserved?: boolean;\r\n  name: string;\r\n}\r\n\r\nexport interface SerializerOptions<T> {\r\n  /**\r\n   * @default true\r\n   */\r\n  explode: boolean;\r\n  style: T;\r\n}\r\n\r\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\r\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\r\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\r\nexport type ObjectStyle = 'form' | 'deepObject';\r\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\r\n\r\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\r\n  value: string;\r\n}\r\n\r\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\r\n  switch (style) {\r\n    case 'label':\r\n      return '.';\r\n    case 'matrix':\r\n      return ';';\r\n    case 'simple':\r\n      return ',';\r\n    default:\r\n      return '&';\r\n  }\r\n};\r\n\r\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\r\n  switch (style) {\r\n    case 'form':\r\n      return ',';\r\n    case 'pipeDelimited':\r\n      return '|';\r\n    case 'spaceDelimited':\r\n      return '%20';\r\n    default:\r\n      return ',';\r\n  }\r\n};\r\n\r\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\r\n  switch (style) {\r\n    case 'label':\r\n      return '.';\r\n    case 'matrix':\r\n      return ';';\r\n    case 'simple':\r\n      return ',';\r\n    default:\r\n      return '&';\r\n  }\r\n};\r\n\r\nexport const serializeArrayParam = ({\r\n  allowReserved,\r\n  explode,\r\n  name,\r\n  style,\r\n  value,\r\n}: SerializeOptions<ArraySeparatorStyle> & {\r\n  value: unknown[];\r\n}) => {\r\n  if (!explode) {\r\n    const joinedValues = (\r\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\r\n    ).join(separatorArrayNoExplode(style));\r\n    switch (style) {\r\n      case 'label':\r\n        return `.${joinedValues}`;\r\n      case 'matrix':\r\n        return `;${name}=${joinedValues}`;\r\n      case 'simple':\r\n        return joinedValues;\r\n      default:\r\n        return `${name}=${joinedValues}`;\r\n    }\r\n  }\r\n\r\n  const separator = separatorArrayExplode(style);\r\n  const joinedValues = value\r\n    .map((v) => {\r\n      if (style === 'label' || style === 'simple') {\r\n        return allowReserved ? v : encodeURIComponent(v as string);\r\n      }\r\n\r\n      return serializePrimitiveParam({\r\n        allowReserved,\r\n        name,\r\n        value: v as string,\r\n      });\r\n    })\r\n    .join(separator);\r\n  return style === 'label' || style === 'matrix'\r\n    ? separator + joinedValues\r\n    : joinedValues;\r\n};\r\n\r\nexport const serializePrimitiveParam = ({\r\n  allowReserved,\r\n  name,\r\n  value,\r\n}: SerializePrimitiveParam) => {\r\n  if (value === undefined || value === null) {\r\n    return '';\r\n  }\r\n\r\n  if (typeof value === 'object') {\r\n    throw new Error(\r\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\r\n    );\r\n  }\r\n\r\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\r\n};\r\n\r\nexport const serializeObjectParam = ({\r\n  allowReserved,\r\n  explode,\r\n  name,\r\n  style,\r\n  value,\r\n  valueOnly,\r\n}: SerializeOptions<ObjectSeparatorStyle> & {\r\n  value: Record<string, unknown> | Date;\r\n  valueOnly?: boolean;\r\n}) => {\r\n  if (value instanceof Date) {\r\n    return valueOnly ? value.toISOString() : `${name}=${value.toISOString()}`;\r\n  }\r\n\r\n  if (style !== 'deepObject' && !explode) {\r\n    let values: string[] = [];\r\n    Object.entries(value).forEach(([key, v]) => {\r\n      values = [\r\n        ...values,\r\n        key,\r\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\r\n      ];\r\n    });\r\n    const joinedValues = values.join(',');\r\n    switch (style) {\r\n      case 'form':\r\n        return `${name}=${joinedValues}`;\r\n      case 'label':\r\n        return `.${joinedValues}`;\r\n      case 'matrix':\r\n        return `;${name}=${joinedValues}`;\r\n      default:\r\n        return joinedValues;\r\n    }\r\n  }\r\n\r\n  const separator = separatorObjectExplode(style);\r\n  const joinedValues = Object.entries(value)\r\n    .map(([key, v]) =>\r\n      serializePrimitiveParam({\r\n        allowReserved,\r\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\r\n        value: v as string,\r\n      }),\r\n    )\r\n    .join(separator);\r\n  return style === 'label' || style === 'matrix'\r\n    ? separator + joinedValues\r\n    : joinedValues;\r\n};\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\ntype Slot = 'body' | 'headers' | 'path' | 'query';\r\n\r\nexport type Field =\r\n  | {\r\n      in: Exclude<Slot, 'body'>;\r\n      /**\r\n       * Field name. This is the name we want the user to see and use.\r\n       */\r\n      key: string;\r\n      /**\r\n       * Field mapped name. This is the name we want to use in the request.\r\n       * If omitted, we use the same value as `key`.\r\n       */\r\n      map?: string;\r\n    }\r\n  | {\r\n      in: Extract<Slot, 'body'>;\r\n      /**\r\n       * Key isn't required for bodies.\r\n       */\r\n      key?: string;\r\n      map?: string;\r\n    };\r\n\r\nexport interface Fields {\r\n  allowExtra?: Partial<Record<Slot, boolean>>;\r\n  args?: ReadonlyArray<Field>;\r\n}\r\n\r\nexport type FieldsConfig = ReadonlyArray<Field | Fields>;\r\n\r\nconst extraPrefixesMap: Record<string, Slot> = {\r\n  $body_: 'body',\r\n  $headers_: 'headers',\r\n  $path_: 'path',\r\n  $query_: 'query',\r\n};\r\nconst extraPrefixes = Object.entries(extraPrefixesMap);\r\n\r\ntype KeyMap = Map<\r\n  string,\r\n  {\r\n    in: Slot;\r\n    map?: string;\r\n  }\r\n>;\r\n\r\nconst buildKeyMap = (fields: FieldsConfig, map?: KeyMap): KeyMap => {\r\n  if (!map) {\r\n    map = new Map();\r\n  }\r\n\r\n  for (const config of fields) {\r\n    if ('in' in config) {\r\n      if (config.key) {\r\n        map.set(config.key, {\r\n          in: config.in,\r\n          map: config.map,\r\n        });\r\n      }\r\n    } else if (config.args) {\r\n      buildKeyMap(config.args, map);\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\ninterface Params {\r\n  body: unknown;\r\n  headers: Record<string, unknown>;\r\n  path: Record<string, unknown>;\r\n  query: Record<string, unknown>;\r\n}\r\n\r\nconst stripEmptySlots = (params: Params) => {\r\n  for (const [slot, value] of Object.entries(params)) {\r\n    if (value && typeof value === 'object' && !Object.keys(value).length) {\r\n      delete params[slot as Slot];\r\n    }\r\n  }\r\n};\r\n\r\nexport const buildClientParams = (\r\n  args: ReadonlyArray<unknown>,\r\n  fields: FieldsConfig,\r\n) => {\r\n  const params: Params = {\r\n    body: {},\r\n    headers: {},\r\n    path: {},\r\n    query: {},\r\n  };\r\n\r\n  const map = buildKeyMap(fields);\r\n\r\n  let config: FieldsConfig[number] | undefined;\r\n\r\n  for (const [index, arg] of args.entries()) {\r\n    if (fields[index]) {\r\n      config = fields[index];\r\n    }\r\n\r\n    if (!config) {\r\n      continue;\r\n    }\r\n\r\n    if ('in' in config) {\r\n      if (config.key) {\r\n        const field = map.get(config.key)!;\r\n        const name = field.map || config.key;\r\n        (params[field.in] as Record<string, unknown>)[name] = arg;\r\n      } else {\r\n        params.body = arg;\r\n      }\r\n    } else {\r\n      for (const [key, value] of Object.entries(arg ?? {})) {\r\n        const field = map.get(key);\r\n\r\n        if (field) {\r\n          const name = field.map || key;\r\n          (params[field.in] as Record<string, unknown>)[name] = value;\r\n        } else {\r\n          const extra = extraPrefixes.find(([prefix]) =>\r\n            key.startsWith(prefix),\r\n          );\r\n\r\n          if (extra) {\r\n            const [prefix, slot] = extra;\r\n            (params[slot] as Record<string, unknown>)[\r\n              key.slice(prefix.length)\r\n            ] = value;\r\n          } else {\r\n            for (const [slot, allowed] of Object.entries(\r\n              config.allowExtra ?? {},\r\n            )) {\r\n              if (allowed) {\r\n                (params[slot as Slot] as Record<string, unknown>)[key] = value;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  stripEmptySlots(params);\r\n\r\n  return params;\r\n};\r\n","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { Config } from './types.gen';\r\n\r\nexport type ServerSentEventsOptions<TData = unknown> = Omit<\r\n  RequestInit,\r\n  'method'\r\n> &\r\n  Pick<Config, 'method' | 'responseTransformer' | 'responseValidator'> & {\r\n    /**\r\n     * Callback invoked when a network or parsing error occurs during streaming.\r\n     *\r\n     * This option applies only if the endpoint returns a stream of events.\r\n     *\r\n     * @param error The error that occurred.\r\n     */\r\n    onSseError?: (error: unknown) => void;\r\n    /**\r\n     * Callback invoked when an event is streamed from the server.\r\n     *\r\n     * This option applies only if the endpoint returns a stream of events.\r\n     *\r\n     * @param event Event streamed from the server.\r\n     * @returns Nothing (void).\r\n     */\r\n    onSseEvent?: (event: StreamEvent<TData>) => void;\r\n    /**\r\n     * Default retry delay in milliseconds.\r\n     *\r\n     * This option applies only if the endpoint returns a stream of events.\r\n     *\r\n     * @default 3000\r\n     */\r\n    sseDefaultRetryDelay?: number;\r\n    /**\r\n     * Maximum number of retry attempts before giving up.\r\n     */\r\n    sseMaxRetryAttempts?: number;\r\n    /**\r\n     * Maximum retry delay in milliseconds.\r\n     *\r\n     * Applies only when exponential backoff is used.\r\n     *\r\n     * This option applies only if the endpoint returns a stream of events.\r\n     *\r\n     * @default 30000\r\n     */\r\n    sseMaxRetryDelay?: number;\r\n    /**\r\n     * Optional sleep function for retry backoff.\r\n     *\r\n     * Defaults to using `setTimeout`.\r\n     */\r\n    sseSleepFn?: (ms: number) => Promise<void>;\r\n    url: string;\r\n  };\r\n\r\nexport interface StreamEvent<TData = unknown> {\r\n  data: TData;\r\n  event?: string;\r\n  id?: string;\r\n  retry?: number;\r\n}\r\n\r\nexport type ServerSentEventsResult<\r\n  TData = unknown,\r\n  TReturn = void,\r\n  TNext = unknown,\r\n> = {\r\n  stream: AsyncGenerator<\r\n    TData extends Record<string, unknown> ? TData[keyof TData] : TData,\r\n    TReturn,\r\n    TNext\r\n  >;\r\n};\r\n\r\nexport const createSseClient = <TData = unknown>({\r\n  onSseError,\r\n  onSseEvent,\r\n  responseTransformer,\r\n  responseValidator,\r\n  sseDefaultRetryDelay,\r\n  sseMaxRetryAttempts,\r\n  sseMaxRetryDelay,\r\n  sseSleepFn,\r\n  url,\r\n  ...options\r\n}: ServerSentEventsOptions): ServerSentEventsResult<TData> => {\r\n  let lastEventId: string | undefined;\r\n\r\n  const sleep =\r\n    sseSleepFn ??\r\n    ((ms: number) => new Promise((resolve) => setTimeout(resolve, ms)));\r\n\r\n  const createStream = async function* () {\r\n    let retryDelay: number = sseDefaultRetryDelay ?? 3000;\r\n    let attempt = 0;\r\n    const signal = options.signal ?? new AbortController().signal;\r\n\r\n    while (true) {\r\n      if (signal.aborted) break;\r\n\r\n      attempt++;\r\n\r\n      const headers =\r\n        options.headers instanceof Headers\r\n          ? options.headers\r\n          : new Headers(options.headers as Record<string, string> | undefined);\r\n\r\n      if (lastEventId !== undefined) {\r\n        headers.set('Last-Event-ID', lastEventId);\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(url, { ...options, headers, signal });\r\n\r\n        if (!response.ok)\r\n          throw new Error(\r\n            `SSE failed: ${response.status} ${response.statusText}`,\r\n          );\r\n\r\n        if (!response.body) throw new Error('No body in SSE response');\r\n\r\n        const reader = response.body\r\n          .pipeThrough(new TextDecoderStream())\r\n          .getReader();\r\n\r\n        let buffer = '';\r\n\r\n        const abortHandler = () => {\r\n          try {\r\n            reader.cancel();\r\n          } catch {\r\n            // noop\r\n          }\r\n        };\r\n\r\n        signal.addEventListener('abort', abortHandler);\r\n\r\n        try {\r\n          while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) break;\r\n            buffer += value;\r\n\r\n            const chunks = buffer.split('\\n\\n');\r\n            buffer = chunks.pop() ?? '';\r\n\r\n            for (const chunk of chunks) {\r\n              const lines = chunk.split('\\n');\r\n              const dataLines: Array<string> = [];\r\n              let eventName: string | undefined;\r\n\r\n              for (const line of lines) {\r\n                if (line.startsWith('data:')) {\r\n                  dataLines.push(line.replace(/^data:\\s*/, ''));\r\n                } else if (line.startsWith('event:')) {\r\n                  eventName = line.replace(/^event:\\s*/, '');\r\n                } else if (line.startsWith('id:')) {\r\n                  lastEventId = line.replace(/^id:\\s*/, '');\r\n                } else if (line.startsWith('retry:')) {\r\n                  const parsed = Number.parseInt(\r\n                    line.replace(/^retry:\\s*/, ''),\r\n                    10,\r\n                  );\r\n                  if (!Number.isNaN(parsed)) {\r\n                    retryDelay = parsed;\r\n                  }\r\n                }\r\n              }\r\n\r\n              let data: unknown;\r\n              let parsedJson = false;\r\n\r\n              if (dataLines.length) {\r\n                const rawData = dataLines.join('\\n');\r\n                try {\r\n                  data = JSON.parse(rawData);\r\n                  parsedJson = true;\r\n                } catch {\r\n                  data = rawData;\r\n                }\r\n              }\r\n\r\n              if (parsedJson) {\r\n                if (responseValidator) {\r\n                  await responseValidator(data);\r\n                }\r\n\r\n                if (responseTransformer) {\r\n                  data = await responseTransformer(data);\r\n                }\r\n              }\r\n\r\n              onSseEvent?.({\r\n                data,\r\n                event: eventName,\r\n                id: lastEventId,\r\n                retry: retryDelay,\r\n              });\r\n\r\n              if (dataLines.length) {\r\n                yield data as any;\r\n              }\r\n            }\r\n          }\r\n        } finally {\r\n          signal.removeEventListener('abort', abortHandler);\r\n          reader.releaseLock();\r\n        }\r\n\r\n        break; // exit loop on normal completion\r\n      } catch (error) {\r\n        // connection failed or aborted; retry after delay\r\n        onSseError?.(error);\r\n\r\n        if (\r\n          sseMaxRetryAttempts !== undefined &&\r\n          attempt >= sseMaxRetryAttempts\r\n        ) {\r\n          break; // stop after firing error\r\n        }\r\n\r\n        // exponential backoff: double retry each attempt, cap at 30s\r\n        const backoff = Math.min(\r\n          retryDelay * 2 ** (attempt - 1),\r\n          sseMaxRetryDelay ?? 30000,\r\n        );\r\n        await sleep(backoff);\r\n      }\r\n    }\r\n  };\r\n\r\n  const stream = createStream();\r\n\r\n  return { stream };\r\n};\r\n"],"names":[],"mappings":"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","ignoreList":[0,1]}