{"version":3,"sources":["turbopack:///[project]/components/ui/data-table.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { useState, useMemo, useCallback } from \"react\"\r\nimport { MoreHorizontal, ChevronDown, Search } from \"lucide-react\"\r\n\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table2\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuSeparator,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\r\nimport { StartDateFilter, EndDateFilter } from \"@/components/ui/DateFilter\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n/* ----------------------------- Types & Helpers ---------------------------- */\r\n\r\nexport interface Column<T> {\r\n  key: keyof T\r\n  header: string\r\n  visible: boolean\r\n  width?: string\r\n  separator?: boolean\r\n  render?: (value: any, row: T) => React.ReactNode\r\n}\r\n\r\ntype FilterType = \"dropdown\" | \"input\" | \"date\"\r\n\r\nexport interface FilterConfig {\r\n  key: string\r\n  label: string\r\n  type: FilterType\r\n  placeholder?: string\r\n  width?: string\r\n  dateRange?: boolean // 날짜 범위 여부\r\n}\r\n\r\nexport interface DataTableProps<T extends Record<string, any>> {\r\n  data: T[]\r\n  columns: Column<T>[]\r\n  onColumnsChange: (columns: Column<T>[]) => void\r\n  className?: string\r\n  isLoading?: boolean\r\n\r\n  // Filters\r\n  searchFilters?: Record<string, string>\r\n  onFilterChange?: (key: string, value: string) => void\r\n  filterOptions?: Record<string, Array<{ value: string; label: string }>>\r\n  filters?: Array<FilterConfig>\r\n\r\n  // Bulk delete / selection\r\n  onBulkDelete?: (selectedIds: string[]) => void\r\n  onSelectionReset?: () => void\r\n  enableBulkDelete?: boolean\r\n  enableRowSelection?: boolean\r\n\r\n  // Add form (v1)\r\n  enableAddForm?: boolean\r\n  showAddForm?: boolean\r\n  onShowAddForm?: () => void\r\n  formData?: Record<string, string>\r\n  formFields?: Array<{\r\n    key: string\r\n    label: string\r\n    type: \"text\" | \"email\" | \"tel\" | \"date\" | \"number\"\r\n    placeholder?: string\r\n    required?: boolean\r\n  }>\r\n  onFormDataChange?: (field: string, value: string) => void\r\n  onAdd?: () => void\r\n  isAddLoading?: boolean\r\n  isNameValid?: boolean\r\n\r\n  // Add form (v2)\r\n  enableAddFormV2?: boolean\r\n  addFormV2Modal?: React.ReactNode\r\n  onShowAddFormV2?: () => void\r\n\r\n  // Actions column\r\n  showActionColumn?: boolean\r\n}\r\n\r\ninterface ActionDropdownProps {\r\n  onCopyId: () => void\r\n  onViewCustomer: () => void\r\n  onViewDetails: () => void\r\n}\r\n\r\n/** Resolve row unique id from common fields (id | code | name) */\r\nconst getRowId = (row: Record<string, any>): string =>\r\n  String(row.id ?? row.code ?? row.name ?? \"\")\r\n\r\n/* ------------------------------ UI Subparts ------------------------------- */\r\n\r\nconst ActionDropdown = React.memo(function ActionDropdown({\r\n  onCopyId,\r\n  onViewCustomer,\r\n  onViewDetails,\r\n}: ActionDropdownProps) {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"ghost\" className=\"h-8 w-8 p-0 hover:bg-muted\">\r\n          <MoreHorizontal className=\"h-4 w-4\" />\r\n          <span className=\"sr-only\">액션 메뉴 열기</span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\r\n        <DropdownMenuItem onClick={onCopyId} className=\"cursor-pointer\">\r\n          ID 복사\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={onViewCustomer} className=\"cursor-pointer\">\r\n          고객 보기\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={onViewDetails} className=\"cursor-pointer\">\r\n          상세 정보 보기\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n})\r\n\r\n/* --------------------------------- Main ---------------------------------- */\r\n\r\nexport function DataTable<T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  onColumnsChange,\r\n  className,\r\n  isLoading,\r\n\r\n  // Filters\r\n  searchFilters,\r\n  onFilterChange,\r\n  filterOptions,\r\n  filters,\r\n\r\n  // Bulk delete / selection\r\n  onBulkDelete,\r\n  onSelectionReset,\r\n  enableBulkDelete = true,\r\n  enableRowSelection = true,\r\n\r\n  // Add form (v1)\r\n  enableAddForm,\r\n  showAddForm,\r\n  onShowAddForm,\r\n  formData,\r\n  formFields,\r\n  onFormDataChange,\r\n  onAdd,\r\n  isAddLoading,\r\n  isNameValid,\r\n\r\n  // Add form (v2)\r\n  enableAddFormV2,\r\n  addFormV2Modal,\r\n  onShowAddFormV2,\r\n\r\n  // Actions\r\n  showActionColumn = true,\r\n}: DataTableProps<T>) {\r\n  const [selectedRows, setSelectedRows] = useState<Set<string>>(new Set())\r\n  const [dropdownSearches, setDropdownSearches] = useState<Record<string, string>>({})\r\n\r\n  // Keep behavior: no client-side filtering\r\n  const filteredData = data\r\n\r\n  const visibleColumns = useMemo(\r\n    () => columns.filter((c) => c.visible),\r\n    [columns]\r\n  )\r\n\r\n  const allRowIds = useMemo(\r\n    () => filteredData.map((row) => getRowId(row)),\r\n    [filteredData]\r\n  )\r\n\r\n  const updateDropdownSearch = useCallback((filterKey: string, searchTerm: string) => {\r\n    setDropdownSearches((prev) => ({ ...prev, [filterKey]: searchTerm }))\r\n  }, [])\r\n\r\n  const getFilteredOptions = useCallback(\r\n    (filterKey: string) => {\r\n      const searchTerm = (dropdownSearches[filterKey] || \"\").toLowerCase()\r\n      const options = filterOptions?.[filterKey] ?? []\r\n      if (!searchTerm) return options\r\n      return options.filter((opt) => opt.label.toLowerCase().includes(searchTerm))\r\n    },\r\n    [dropdownSearches, filterOptions]\r\n  )\r\n\r\n  const handleSelectAll = useCallback(\r\n    (checked: boolean | \"indeterminate\") => {\r\n      if (checked === true) {\r\n        setSelectedRows(new Set(allRowIds))\r\n      } else {\r\n        setSelectedRows(new Set())\r\n      }\r\n    },\r\n    [allRowIds]\r\n  )\r\n\r\n  const handleRowSelect = useCallback((rowId: string, checked: boolean) => {\r\n    setSelectedRows((prev) => {\r\n      const next = new Set(prev)\r\n      if (checked) next.add(rowId)\r\n      else next.delete(rowId)\r\n      return next\r\n    })\r\n  }, [])\r\n\r\n  const toggleColumnVisibility = useCallback(\r\n    (columnKey: keyof T) => {\r\n      const updated = columns.map((col) =>\r\n        col.key === columnKey ? { ...col, visible: !col.visible } : col\r\n      )\r\n      onColumnsChange(updated)\r\n    },\r\n    [columns, onColumnsChange]\r\n  )\r\n\r\n  const handleBulkDeleteClick = useCallback(() => {\r\n    if (!onBulkDelete) return\r\n    const ids = Array.from(selectedRows)\r\n    if (ids.length === 0) return\r\n    onBulkDelete(ids)\r\n    setSelectedRows(new Set())\r\n    onSelectionReset?.()\r\n  }, [onBulkDelete, selectedRows, onSelectionReset])\r\n\r\n  // 셀 병합을 위한 헬퍼 함수\r\n  const getCellSpan = useCallback((data: T[], columnKey: keyof T, currentIndex: number) => {\r\n    const currentValue = data[currentIndex][columnKey]\r\n    let span = 1\r\n    \r\n    // 현재 행부터 아래로 같은 값이 연속되는 개수를 계산\r\n    for (let i = currentIndex + 1; i < data.length; i++) {\r\n      if (data[i][columnKey] === currentValue) {\r\n        span++\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n    \r\n    return span\r\n  }, [])\r\n\r\n  // 셀이 병합된 셀의 첫 번째 행인지 확인\r\n  const isFirstRowOfMergedCell = useCallback((data: T[], columnKey: keyof T, currentIndex: number) => {\r\n    if (currentIndex === 0) return true\r\n    return data[currentIndex][columnKey] !== data[currentIndex - 1][columnKey]\r\n  }, [])\r\n\r\n  return (\r\n    <div className={cn(\"space-y-4\", className)}>\r\n      {/* Filters & Columns Toolbar */}\r\n      <div className=\"p-3 bg-brand-grey-100 border border-brand-grey-200\">\r\n        <div className=\"grid gap-3\">\r\n                     {/* Group 1: Search & Filters */}\r\n           <div className=\"space-y-4 border-b border-gray-300 pb-3\">\r\n            \r\n            {searchFilters && onFilterChange && (\r\n              <div className=\"flex items-end gap-4\">\r\n                <div className=\"flex-1 grid grid-cols-4 gap-4\">\r\n                  {filters?.map((filter) => {\r\n                  const filterValue = searchFilters[filter.key] || \"\"\r\n\r\n                  if (filter.type === \"dropdown\") {\r\n                    const options = filterOptions?.[filter.key] || []\r\n                    const selectedLabel =\r\n                      options.find((opt) => opt.value === filterValue)?.label || filterValue\r\n                    const isSelected = filterValue && filterValue !== \"\"\r\n\r\n                    return (\r\n                      <div key={filter.key} className=\"grid grid-cols-3 items-center space-x-3\">\r\n                        <label className={`text-sm font-medium whitespace-nowrap col-span-1 ${\r\n                          isSelected ? \"text-brand-500\" : \"text-gray-700\"\r\n                        }`}>\r\n                          {filter.label}\r\n                        </label>\r\n                        <div className=\"col-span-2\">\r\n                          <DropdownMenu>\r\n                            <DropdownMenuTrigger asChild>\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                className={`h-10 px-4 w-full justify-between ${\r\n                                  isSelected \r\n                                    ? \"border-brand-500/80 text-brand-500 hover:bg-brand-50\" \r\n                                    : \"border-gray-200 hover:bg-gray-50\"\r\n                                }`}\r\n                              >\r\n                                <span className=\"truncate flex-1 text-left\">\r\n                                  {filterValue ? selectedLabel : \"전체선택\"}\r\n                                </span>\r\n                                <ChevronDown className=\"ml-2 h-4 w-4 flex-shrink-0\" />\r\n                              </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent align=\"start\" className=\"w-48 max-h-60 overflow-y-auto\">\r\n                              {/* Search-in-dropdown */}\r\n                              <div className=\"p-2 border-b\">\r\n                                <Input\r\n                                  type=\"text\"\r\n                                  placeholder={`${filter.label} 검색...`}\r\n                                  className=\"h-8 text-sm\"\r\n                                  value={dropdownSearches[filter.key] || \"\"}\r\n                                  onChange={(e) => updateDropdownSearch(filter.key, e.target.value)}\r\n                                />\r\n                              </div>\r\n\r\n                              <DropdownMenuItem\r\n                                onClick={() => onFilterChange(filter.key, \"\")}\r\n                                className=\"cursor-pointer\"\r\n                              >\r\n                                <div className=\"w-full truncate\">전체선택</div>\r\n                              </DropdownMenuItem>\r\n                              <DropdownMenuSeparator />\r\n                              {getFilteredOptions(filter.key).map((option) => (\r\n                                <DropdownMenuItem\r\n                                  key={option.value}\r\n                                  onClick={() => onFilterChange(filter.key, option.value)}\r\n                                  className=\"cursor-pointer\"\r\n                                >\r\n                                  <div className=\"w-full truncate\">{option.label}</div>\r\n                                </DropdownMenuItem>\r\n                              ))}\r\n                            </DropdownMenuContent>\r\n                          </DropdownMenu>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n\r\n                  if (filter.type === \"input\") {\r\n                    const isSelected = filterValue && filterValue !== \"\"\r\n                    \r\n                    return (\r\n                      <div key={filter.key} className=\"grid grid-cols-3 items-center space-x-3\">\r\n                        <label className={`text-sm font-medium whitespace-nowrap col-span-1 ${\r\n                          isSelected ? \"text-brand-500\" : \"text-gray-700\"\r\n                        }`}>\r\n                          {filter.label}\r\n                        </label>\r\n                        <div className=\"col-span-2\">\r\n                          <Input\r\n                            type=\"text\"\r\n                            placeholder={filter.placeholder || `${filter.label}을 입력하세요`}\r\n                            value={filterValue}\r\n                            onChange={(e) => onFilterChange(filter.key, e.target.value)}\r\n                            className={`h-10 w-full ${\r\n                              isSelected \r\n                                ? \"border-brand-500/80 focus:ring-brand-500/20 focus:border-brand-500\" \r\n                                : \"\"\r\n                            }`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n\r\n                  if (filter.type === \"date\") {\r\n                    const isSelected = filterValue && filterValue !== \"\"\r\n                    \r\n                    return (\r\n                      <div key={filter.key} className=\"grid grid-cols-3 items-center space-x-3\">\r\n                        <label className={`text-sm font-medium whitespace-nowrap col-span-1 ${\r\n                          (filter as any).required \r\n                            ? \"text-orange-600\" \r\n                            : isSelected \r\n                            ? \"text-brand-500\" \r\n                            : \"text-gray-700\"\r\n                        }`}>\r\n                          {filter.label}\r\n                        </label>\r\n                        <div className=\"col-span-2\">\r\n                          <StartDateFilter\r\n                            startDate={filterValue}\r\n                            onStartDateChange={(date) => onFilterChange(filter.key, date)}\r\n                            placeholder={filter.placeholder || \"연도-월-일\"}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  }\r\n\r\n                  // date 타입은 현재 UI 없음(기능 변화 없이 그대로 무시)\r\n                  return null\r\n                })}\r\n                </div>\r\n                \r\n                {/* 조회, 초기화 버튼 */}\r\n                <div className=\"flex items-end space-x-3\">\r\n              {/* 조회 버튼 */}\r\n              <Button \r\n                onClick={() => console.log(\"조회 실행:\", searchFilters)}\r\n                variant=\"outline\"\r\n                className=\"cursor-pointer border-orange-400 text-orange-600 hover:bg-orange-50 hover:border-orange-500\"\r\n              >\r\n                <Search className=\"h-4 w-4 mr-2 text-orange-600\" />\r\n                조회\r\n              </Button>\r\n\r\n              {/* 초기화 버튼 */}\r\n              <Button \r\n                onClick={() => {\r\n                  // 모든 필터 초기화\r\n                  if (onFilterChange) {\r\n                    Object.keys(searchFilters || {}).forEach(key => {\r\n                      onFilterChange(key, \"\")\r\n                    })\r\n                  }\r\n                  // 드롭다운 검색어 초기화\r\n                  setDropdownSearches({})\r\n                  console.log(\"필터 초기화 완료\")\r\n                }}\r\n                variant=\"outline\"\r\n                className=\"cursor-pointer border-gray-300 text-gray-600 hover:bg-gray-50\"\r\n              >\r\n                <div className=\"h-4 w-4 mr-2 text-center\">↺</div>\r\n                초기화\r\n              </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n                                           {/* Group 2: Column toggles & Actions */}\r\n            <div className=\"flex items-center justify-between\">\r\n              {/* Left side: Column visibility */}\r\n              <div className=\"flex items-center space-x-4\">\r\n                <h3 className=\"text-base font-semibold text-gray-900\">표시할 열</h3>\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      className=\"h-10 px-4 border-gray-200 hover:bg-gray-50 w-40 justify-between\"\r\n                    >\r\n                      {visibleColumns.length === columns.length\r\n                        ? \"전체선택\"\r\n                        : visibleColumns.length === 1\r\n                        ? visibleColumns[0].header\r\n                        : `${visibleColumns.length}개 컬럼`}\r\n                      <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"start\" className=\"w-48\">\r\n                    <DropdownMenuCheckboxItem\r\n                      checked={visibleColumns.length === columns.length}\r\n                      onCheckedChange={(checked) => {\r\n                        const v = checked === true\r\n                        onColumnsChange(columns.map((col) => ({ ...col, visible: v })))\r\n                      }}\r\n                    >\r\n                      전체선택\r\n                    </DropdownMenuCheckboxItem>\r\n                    <DropdownMenuSeparator />\r\n                    {columns.map((column) => (\r\n                      <DropdownMenuCheckboxItem\r\n                        key={String(column.key)}\r\n                        checked={column.visible}\r\n                        onCheckedChange={() => toggleColumnVisibility(column.key)}\r\n                      >\r\n                        {column.header}\r\n                      </DropdownMenuCheckboxItem>\r\n                    ))}\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </div>\r\n\r\n              {/* Right side: Action buttons */}\r\n              <div className=\"flex items-center space-x-3\">\r\n                {/* Bulk delete */}\r\n                {enableBulkDelete && (\r\n                  <button\r\n                    onClick={handleBulkDeleteClick}\r\n                    disabled={selectedRows.size === 0 || !onBulkDelete}\r\n                    className={cn(\r\n                      \"px-4 py-2 transition-colors flex items-center justify-center space-x-2 border\",\r\n                      selectedRows.size > 0 && onBulkDelete\r\n                        ? \"text-[#FD5108] border-[#FD5108]/70 hover:bg-[#FD5108]/10 bg-[#FD5108]/20 cursor-pointer\"\r\n                        : \"text-gray-400 border-gray-300 bg-gray-100 cursor-not-allowed\"\r\n                    )}\r\n                  >\r\n                    <span>삭제 ({selectedRows.size})</span>\r\n                  </button>\r\n                )}\r\n\r\n                {/* Excel Upload button */}\r\n                <button\r\n                  className=\"bg-green-100 hover:bg-green-200 text-green-700 px-4 py-2 transition-colors cursor-pointer border border-green-300\"\r\n                >\r\n                  엑셀 업로드\r\n                </button>\r\n\r\n                {/* Add buttons (v2 first, else v1) */}\r\n                {enableAddFormV2 && onShowAddFormV2 ? (\r\n                  <button\r\n                    onClick={onShowAddFormV2}\r\n                    className=\"bg-gray-900/60 border border-gray-900/70 hover:bg-gray-800 text-white px-4 py-2 transition-colors cursor-pointer\"\r\n                  >\r\n                    추가\r\n                  </button>\r\n                ) : enableAddForm && onShowAddForm ? (\r\n                  <button\r\n                    onClick={onShowAddForm}\r\n                    className=\"bg-gray-900/60 border border-gray-900/70 hover:bg-gray-800 text-white px-4 py-2 transition-colors cursor-pointer\"\r\n                  >\r\n                    {showAddForm ? \"취소\" : \"추가\"}\r\n                  </button>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"border-t border-b bg-white w-full\">\r\n        <Table className=\"w-full\">\r\n          <TableHeader>\r\n            <TableRow className=\"bg-gray-50 hover:bg-gray-50\">\r\n              {enableRowSelection && (\r\n                <TableHead \r\n                  className=\"w-12 p-2 !border-t !border-orange-600\"\r\n                  style={{ borderTop: '1px solid #ea580c' }}\r\n                >\r\n                  <Checkbox\r\n                    checked={selectedRows.size === filteredData.length && filteredData.length > 0}\r\n                    onCheckedChange={handleSelectAll}\r\n                    aria-label=\"모든 행 선택\"\r\n                    className=\"cursor-pointer\"\r\n                  />\r\n                </TableHead>\r\n              )}\r\n              {visibleColumns.map((column, index) => (\r\n                <TableHead \r\n                  key={String(column.key)} \r\n                  className={cn(\r\n                    \"p-2 font-semibold text-gray-900 !border-t !border-orange-600\",\r\n                    column.separator && \"border-l border-gray-400\"\r\n                  )}\r\n                  style={{ borderTop: '0.5px solid #ea580c' }}\r\n                >\r\n                  {column.header}\r\n                </TableHead>\r\n              ))}\r\n              {showActionColumn && (\r\n                <TableHead \r\n                  className=\"w-12 p-2 !border-t !border-orange-600\"\r\n                  style={{ borderTop: '1px solid #ea580c' }}\r\n                >\r\n                  액션\r\n                </TableHead>\r\n              )}\r\n            </TableRow>\r\n          </TableHeader>\r\n\r\n          <TableBody>\r\n            {isLoading ? (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={visibleColumns.length + (enableRowSelection ? 2 : 1)}\r\n                  className=\"h-16 text-center text-gray-500\"\r\n                >\r\n                  <div className=\"flex items-center justify-center space-x-2\">\r\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500\"></div>\r\n                    <span>데이터를 불러오는 중입니다...</span>\r\n                  </div>\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : filteredData.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={visibleColumns.length + (enableRowSelection ? 2 : 1)}\r\n                  className=\"h-32 text-center text-gray-500\"\r\n                >\r\n                  <div className=\"flex flex-col items-center justify-center space-y-2\">\r\n                    <div className=\"text-gray-400 text-4xl\">📋</div>\r\n                    <p className=\"text-gray-600 text-lg font-medium\">표시할 데이터가 없습니다</p>\r\n                    <p className=\"text-gray-500 text-sm\">검색 조건을 변경해보세요</p>\r\n                  </div>\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              filteredData.map((item, index) => {\r\n                const rowId = getRowId(item)\r\n                const isSelected = enableRowSelection && selectedRows.has(rowId)\r\n\r\n                return (\r\n                  <TableRow\r\n                    key={rowId || index}\r\n                    data-state={isSelected ? \"selected\" : undefined}\r\n                    className={cn(\r\n                      \"hover:bg-gray-50 transition-colors\",\r\n                      isSelected && \"bg-blue-50 hover:bg-blue-100\"\r\n                    )}\r\n                  >\r\n                    {enableRowSelection && (\r\n                      <TableCell className=\"p-1.5\">\r\n                        <Checkbox\r\n                          checked={selectedRows.has(rowId)}\r\n                          onCheckedChange={(checked) => handleRowSelect(rowId, checked as boolean)}\r\n                          aria-label={`${index + 1}번째 행 선택`}\r\n                          className=\"cursor-pointer\"\r\n                        />\r\n                      </TableCell>\r\n                    )}\r\n\r\n                                         {visibleColumns.map((column) => {\r\n                       const columnKey = column.key\r\n                       const isMergedColumn = columnKey === 'jobCode'\r\n                       \r\n                       // 병합할 컬럼이고 첫 번째 행이 아닌 경우 셀을 렌더링하지 않음\r\n                       if (isMergedColumn && !isFirstRowOfMergedCell(filteredData, columnKey, index)) {\r\n                         return null\r\n                       }\r\n                       \r\n                       // 병합할 컬럼인 경우 rowSpan 적용\r\n                       const rowSpan = isMergedColumn ? getCellSpan(filteredData, columnKey, index) : 1\r\n                       \r\n                       return (\r\n                         <TableCell \r\n                           key={String(column.key)} \r\n                           className={cn(\r\n                             \"p-2 text-gray-700 text-sm\",\r\n                             column.separator && \"border-l border-dashed\"\r\n                           )}\r\n                           style={column.separator ? { borderLeftColor: '#ea580c' } : undefined}\r\n                           rowSpan={rowSpan > 1 ? rowSpan : undefined}\r\n                         >\r\n                           {column.render ? column.render(item[column.key], item) : String(item[column.key] ?? \"\")}\r\n                         </TableCell>\r\n                       )\r\n                     })}\r\n\r\n                    {showActionColumn && (\r\n                      <TableCell className=\"p-1.5\">\r\n                        {\"actions\" in item && item.actions ? (\r\n                          item.actions\r\n                        ) : (\r\n                          <ActionDropdown\r\n                            onCopyId={() => console.log(\"ID 복사:\", item.id || item.code)}\r\n                            onViewCustomer={() => console.log(\"고객 보기:\", item)}\r\n                            onViewDetails={() => console.log(\"상세 정보 보기:\", item)}\r\n                          />\r\n                        )}\r\n                      </TableCell>\r\n                    )}\r\n                  </TableRow>\r\n                )\r\n              })\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Add Form (v1) */}\r\n      {enableAddForm && showAddForm && formData && formFields && onFormDataChange && onAdd && (\r\n        <Dialog open={showAddForm} onOpenChange={onShowAddForm}>\r\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n            <DialogHeader>\r\n              <DialogTitle>새 항목 추가</DialogTitle>\r\n            </DialogHeader>\r\n\r\n            <div className=\"space-y-6\">\r\n              {/* Fields */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {formFields.map((field) => (\r\n                  <div key={field.key}>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      {field.label} {field.required && <span className=\"text-red-500\">*</span>}\r\n                    </label>\r\n                    <input\r\n                      type={field.type}\r\n                      placeholder={field.placeholder || `${field.label}을 입력하세요`}\r\n                      value={formData[field.key] || \"\"}\r\n                      onChange={(e) => onFormDataChange(field.key, e.target.value)}\r\n                      className=\"w-full px-3 py-2 border border-input bg-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n                      required={field.required}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Actions */}\r\n              <div className=\"flex justify-end space-x-2 pt-4 border-t\">\r\n                <Button variant=\"outline\" onClick={onShowAddForm} disabled={isAddLoading}>\r\n                  취소\r\n                </Button>\r\n                <Button onClick={onAdd} disabled={!!isAddLoading || !isNameValid}>\r\n                  {isAddLoading ? (\r\n                    <>\r\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\r\n                      추가 중...\r\n                    </>\r\n                  ) : (\r\n                    \"추가\"\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n\r\n      {/* Add Form (v2) */}\r\n      {enableAddFormV2 && addFormV2Modal}\r\n    </div>\r\n  )\r\n}"],"names":[],"mappings":"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"}