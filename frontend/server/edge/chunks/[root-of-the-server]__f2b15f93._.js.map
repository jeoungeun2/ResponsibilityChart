{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nexport function middleware(request: NextRequest) {\r\n  // /api/backend 경로에 대한 보안 검사\r\n  if (request.nextUrl.pathname.startsWith('/api/backend')) {\r\n    // CSRF 보호를 위한 Origin 검사\r\n    const origin = request.headers.get('origin');\r\n    const referer = request.headers.get('referer');\r\n    \r\n    // 같은 도메인에서의 요청만 허용\r\n    if (origin && !origin.startsWith(process.env.NEXTAUTH_URL || 'http://localhost:3000')) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Referer 헤더 검사 (선택적)\r\n    if (referer && !referer.startsWith(process.env.NEXTAUTH_URL || 'http://localhost:3000')) {\r\n      return NextResponse.json(\r\n        { error: 'Forbidden' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/api/backend/:path*',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAGO,SAAS,WAAW,OAAoB;IAC7C,4BAA4B;IAC5B,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,iBAAiB;QACvD,wBAAwB;QACxB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEpC,mBAAmB;QACnB,IAAI,UAAU,CAAC,OAAO,UAAU,CAAC,QAAQ,GAAG,CAAC,YAAY,IAAI,0BAA0B;YACrF,OAAO,+TAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAY,GACrB;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,IAAI,WAAW,CAAC,QAAQ,UAAU,CAAC,QAAQ,GAAG,CAAC,YAAY,IAAI,0BAA0B;YACvF,OAAO,+TAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAY,GACrB;gBAAE,QAAQ;YAAI;QAElB;IACF;IAEA,OAAO,+TAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}