// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/improvement-implementation" | "/management-action-generation" | "/management-action/department" | "/management-action/executive" | "/master/department" | "/master/executive" | "/master/executive/detail/[id]" | "/master/executive_front" | "/master/executive_front/concurrent" | "/master/executive_front/evaluation" | "/master/executive_front/position" | "/master/meeting" | "/master/organization" | "/responsibility-check/management" | "/responsibility-check/status" | "/responsibility-management/allocation" | "/responsibility-management/description" | "/responsibility-management/description/management" | "/responsibility-management/system-diagram" | "/signin" | "/signup"
type AppRouteHandlerRoutes = "/api/auth/[...nextauth]" | "/api/backend/[...path]" | "/api/backend/test"
type PageRoutes = never
type LayoutRoutes = "/" | "/management-action" | "/master" | "/master/executive_front" | "/responsibility-check" | "/responsibility-management"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/auth/[...nextauth]": { "nextauth": string[]; }
  "/api/backend/[...path]": { "path": string[]; }
  "/api/backend/test": {}
  "/improvement-implementation": {}
  "/management-action": {}
  "/management-action-generation": {}
  "/management-action/department": {}
  "/management-action/executive": {}
  "/master": {}
  "/master/department": {}
  "/master/executive": {}
  "/master/executive_front": {}
  "/master/executive_front/concurrent": {}
  "/master/executive_front/evaluation": {}
  "/master/executive_front/position": {}
  "/master/executive/detail/[id]": { "id": string; }
  "/master/meeting": {}
  "/master/organization": {}
  "/responsibility-check": {}
  "/responsibility-check/management": {}
  "/responsibility-check/status": {}
  "/responsibility-management": {}
  "/responsibility-management/allocation": {}
  "/responsibility-management/description": {}
  "/responsibility-management/description/management": {}
  "/responsibility-management/system-diagram": {}
  "/signin": {}
  "/signup": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/management-action": never
  "/master": never
  "/master/executive_front": never
  "/responsibility-check": never
  "/responsibility-management": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
